pipeline {
    agent any
        tools {
        jdk 'JAVA'
        maven 'maven'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
        stages {
        stage("Git Checkout") {
            steps {
                git branch:'Developed', changelog:false, poll:false,url:'https://github.com/KelerMC/ProyectoFinalV-VG4'
            }
        }
        stage("Build with Maven") {
            steps {
                bat "mvn -f spring-petclinic-main clean compile -Dcheckstyle.skip=true"
            }
        }
        stage("Run Unit Tests") {
            steps {
                //echo "Unit Tests skipped"
                bat "mvn -f spring-petclinic-main test -Dcheckstyle.skip=true"
            }
        }
        stage("SonarQube Analysis") {
            steps {
                //echo "SonarQube Analysis skipped"
                
                bat "$SCANNER_HOME/bin/sonar-scanner -Dsonar.url=http://localhost:9000/ \
                    -Dsonar.login=squ_f98ffa7978805dd40117bf4113272c66f6164f59 \
                    -Dsonar.projectKey=ProyectoFinal \
                    -Dsonar.projectName=ProyectoFinal \
                    -Dsonar.sources=spring-petclinic-main/src/main/java \
                    -Dsonar.java.binaries=."
                
            }
        }
		stage("Deploy ") {
            steps {
                echo "Maven deploy skipped"
				//bat "mvn -f spring-petclinic-main wrapper:wrapper"
                //bat "mvn -f spring-petclinic-main spring-boot:run -Dcheckstyle.skip=true"
            }
        }
        stage("Deploy with Docker"){
            steps {
                //echo "Docker deploy skipped"
                bat "mvn -f spring-petclinic-main clean package -Dcheckstyle.skip=true -DskipTests"
                bat "mvn -f spring-petclinic-main spring-boot:build-image -Dcheckstyle.skip=true -DskipTests"
                bat "docker run -d -p 9090:9090 --name spring-petclinic-container spring-petclinic:3.3.0-SNAPSHOT"
                sleep(time: 40, unit: "SECONDS")
            }
        }
		stage("Performance Testing with JMeter") {
			steps {
				dir('spring-petclinic-main/src/test/jmeter') {
					bat 'jmeter -n -t petclinic_test_plan.jmx -l results.jtl'
					bat 'jmeter -g results.jtl -o ../../../../report'
				}
			}
		}
		stage("Selenium Test") {
		    steps {
		        //echo "Selenium skipped"
				bat "mvn -f SeleniumDemo test"
		    }
		}
		stage("Stop Container") {
            steps {
                bat "docker stop spring-petclinic-container"
                bat "docker rm spring-petclinic-container"
            }
        }
        // And next stages if you want to define further...
    } // End of stages
} // End of pipeline