--
-- Create Schema Script 
--   Database Version   : 10.2.0.3.0 
--   Toad Version       : 10.6.0.42 
--   DB Connect String  : PROD 
--   Schema             : CLAUDIO 
--   Script Created by  : CLAUDIO 
--   Script Created at  : 08/03/2014 10:30:05 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Directories: 0 
--   Indexes: 27        Columns: 27         
--   Packages: 30       Lines of Code: 311 
--   Package Bodies: 30 Lines of Code: 1276 
--   Tables: 27         Columns: 202        Constraints: 60     


-- "Set define off" turns off substitution variables. 
Set define off; 

--
-- CALIBRES  (Table) 
--
CREATE TABLE MICROSERVICIOS.CALIBRES
(
  CALIBRESID      NUMBER(18)                    NOT NULL,
  DENOMINACION    VARCHAR2(20 BYTE),
  ESTADOCALIBRES  VARCHAR2(5 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- NACIONALIDAD  (Table) 
--
CREATE TABLE MICROSERVICIOS.NACIONALIDAD
(
  NACIONALIDADID      NUMBER(18)                NOT NULL,
  CODIGONACIONALIDAD  VARCHAR2(2 BYTE),
  DENOMINACION        VARCHAR2(100 BYTE),
  ESTADONACIONALIDAD  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- OPERACION  (Table) 
--
CREATE TABLE MICROSERVICIOS.OPERACION
(
  OPERACIONID            NUMBER(18)             NOT NULL,
  DENOMINACIONOPERACION  VARCHAR2(150 BYTE),
  FECHAREGISTRO          DATE,
  FECHAACTUALIZACION     DATE,
  ESTADOOPERACION        VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- ROLUSUARIO  (Table) 
--
CREATE TABLE MICROSERVICIOS.ROLUSUARIO
(
  IDROLUSUARIO      NUMBER(18)                  NOT NULL,
  DENOMINACIONROL   VARCHAR2(100 BYTE),
  ESTADOROLUSUARIO  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- SANIDAD  (Table) 
--
CREATE TABLE MICROSERVICIOS.SANIDAD
(
  SANIDADID            NUMBER(18)               NOT NULL,
  CALIBRESID           NUMBER(18)               NOT NULL,
  DENOMINACIONSANIDAD  VARCHAR2(250 BYTE),
  ESTADOSANIDAD        VARCHAR2(5 BYTE),
  VALORSANIDAD         NUMBER(18)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- TIPODOCUMENTO  (Table) 
--
CREATE TABLE MICROSERVICIOS.TIPODOCUMENTO
(
  TIPODOCUMENTOID      NUMBER(18)               NOT NULL,
  DENOMINACION         VARCHAR2(3 BYTE),
  DESCRIPCION          VARCHAR2(400 BYTE),
  INDVENTA             VARCHAR2(1 BYTE),
  INDALMACEN           VARCHAR2(1 BYTE),
  INDALMACENMOV        VARCHAR2(1 BYTE),
  ESTADOTIPODOCUMENTO  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- TIPOMOVIMIENTO  (Table) 
--
CREATE TABLE MICROSERVICIOS.TIPOMOVIMIENTO
(
  TIPOMOVIMIENTOID      NUMBER(18)              NOT NULL,
  DENOMINACION          VARCHAR2(70 BYTE),
  DESCRIPCION           VARCHAR2(250 BYTE),
  INDENTRADA            VARCHAR2(1 BYTE),
  INDTRANSFERENCIA      VARCHAR2(1 BYTE),
  INDDEVOLUCION         VARCHAR2(1 BYTE),
  ESTADOTIPOMOVIMIENTO  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- UBIGEO  (Table) 
--
CREATE TABLE MICROSERVICIOS.UBIGEO
(
  UBIGEOID            NUMBER(18)                NOT NULL,
  DESCRIPCION         VARCHAR2(150 BYTE),
  CODDPTO             VARCHAR2(2 BYTE),
  CODPROV             VARCHAR2(2 BYTE),
  CODDIST             VARCHAR2(2 BYTE),
  FECHAREGISTRO       DATE,
  FECHAACTUALIZACION  DATE
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- UNIDADMEDIDA  (Table) 
--
CREATE TABLE MICROSERVICIOS.UNIDADMEDIDA
(
  UNIDADMEDIDAID      NUMBER(18)                NOT NULL,
  DENOMINACION        VARCHAR2(100 BYTE),
  ESTADOUNIDADMEDIDA  VARCHAR2(1 BYTE),
  CODIGOUNIDAD        VARCHAR2(2 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- VALORTABLA  (Table) 
--
CREATE TABLE MICROSERVICIOS.VALORTABLA
(
  TABLAID       NUMBER(18)                      NOT NULL,
  ITEMID        NUMBER(18)                      NOT NULL,
  DENOMINACION  VARCHAR2(70 BYTE),
  DESCORTA      VARCHAR2(30 BYTE),
  VALOR         VARCHAR2(100 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_ROLUSUARIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_ROLUSUARIO
IS

    FUNCTION LIST_ROLUSUARIO RETURN SYS_REFCURSOR;

    
END WEB_ROLUSUARIO;
/


--
-- QB_ENCRIPCION  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.QB_ENCRIPCION iS
--**********************************************************************************************************
--** OBJETIVO             : CONTIENE LAS UTILIDADES DE ENCRIPCION Y DESENCRIPCION
--** ESQUEMA              : UTIL
--** NOMBRE               : QB_ENCRIPCION / HEADER

--**********************************************************************************************************
   
   --------------------------------------------------------------------------
   -------------------- FUNCION QUE CODIFICA UN TEXTO------------------------
   --------------------------------------------------------------------------
   FUNCTION FB_ENCRIPTAR( TXT_ENCRIP VARCHAR2 ) RETURN RAW;
    
   --------------------------------------------------------------------------
   ------------------- FUNCION QUE DECODIFICA UN TEXTO-----------------------
   --------------------------------------------------------------------------
    
   FUNCTION FB_DESCENCRIPTAR( TXT_DESENCRIP VARCHAR2 ) RETURN VARCHAR2;
       
END QB_ENCRIPCION;
/


--
-- WEB_NACIONALIDAD  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_NACIONALIDAD IS

    FUNCTION LIST_NACIONALIDAD RETURN SYS_REFCURSOR;   
       
END WEB_NACIONALIDAD;
/


--
-- WEB_OPERACION  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_OPERACION IS 


    FUNCTION LIST_OPERACION RETURN  SYS_REFCURSOR;
    
      FUNCTION LIST_OPERACION(IN_DENOMINACIONOPERACION IN VARCHAR2) RETURN  SYS_REFCURSOR;
    
    PROCEDURE REGISTRAR_OPERACION ( IN_DENOMINACIONOPERACION IN VARCHAR2, PC_DET_RPTA OUT VARCHAR2);
    
    FUNCTION GET_OPERACION (IN_DENOMINACIONOPERACION IN VARCHAR2) RETURN SYS_REFCURSOR;
   
END WEB_OPERACION;
/


--
-- WEB_UBIGEO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_UBIGEO IS

    FUNCTION LIST_UBIGEO RETURN SYS_REFCURSOR;   
       
END WEB_UBIGEO;
/


--
-- WEB_VALORTABLA  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_VALORTABLA IS

    FUNCTION LIST_VALORTABLA_DOCUMENTO RETURN SYS_REFCURSOR;   
    FUNCTION LIST_VALORTABLA_TELEFONO RETURN SYS_REFCURSOR;   
    FUNCTION LIST_VALORTABLA_TIPO_PERSONA RETURN SYS_REFCURSOR;   
       
END WEB_VALORTABLA;
/


--
-- WEB_SANIDAD  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_SANIDAD IS

   PROCEDURE INS_SANIDAD (IN_CALIBRESID IN NUMBER, IN_DENOMINACIONSANIDAD IN VARCHAR2, IN_VALORSANIDAD IN NUMBER, RPTA OUT VARCHAR2);
    
    FUNCTION LIST_SANIDAD RETURN SYS_REFCURSOR;
    
END WEB_SANIDAD;
/


--
-- WEB_TIPODOCUMENTO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_TIPODOCUMENTO
IS 

     FUNCTION LIST_TIPODOCUMENTO RETURN SYS_REFCURSOR; 
     
 END WEB_TIPODOCUMENTO;
/


--
-- WEB_TIPOMOVIMIENTO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_TIPOMOVIMIENTO
IS 

     FUNCTION LIST_TIPOMOVIMIENTO RETURN SYS_REFCURSOR; 
     
 END WEB_TIPOMOVIMIENTO;
/


--
-- WEB_UNIDADMEDIDA  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_UNIDADMEDIDA
IS 

FUNCTION LIST_UNIDADMEDIDA RETURN SYS_REFCURSOR;

END WEB_UNIDADMEDIDA;
/


--
-- WEB_SANIDAD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_SANIDAD IS

     PROCEDURE INS_SANIDAD (IN_CALIBRESID IN NUMBER, IN_DENOMINACIONSANIDAD IN VARCHAR2, IN_VALORSANIDAD IN NUMBER, RPTA OUT VARCHAR2)
    IS
    IN_SANIDADID SANIDAD.SANIDADID%TYPE;
    IN_ESTADOSANIDAD SANIDAD.ESTADOSANIDAD%TYPE:='ACT';
 
    BEGIN
        SELECT NVL(MAX(SANIDADID),0)+1 INTO IN_SANIDADID FROM SANIDAD;
        INSERT INTO SANIDAD (SANIDADID, CALIBRESID, DENOMINACIONSANIDAD, ESTADOSANIDAD,VALORSANIDAD)
        VALUES(IN_SANIDADID, IN_CALIBRESID, IN_DENOMINACIONSANIDAD, IN_ESTADOSANIDAD,IN_VALORSANIDAD);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
    FUNCTION LIST_SANIDAD RETURN SYS_REFCURSOR
    IS
    SANIDAD_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN SANIDAD_RESULT
        FOR SELECT S.SANIDADID, C.DENOMINACION , S.DENOMINACIONSANIDAD, S.VALORSANIDAD, S.ESTADOSANIDAD
            FROM SANIDAD S INNER JOIN CALIBRES C ON C.CALIBRESID=S.CALIBRESID 
            ORDER BY S.SANIDADID DESC; 
        RETURN SANIDAD_RESULT;
    END LIST_SANIDAD;
    
END WEB_SANIDAD;
/


--
-- WEB_OPERACION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_OPERACION IS 


    FUNCTION LIST_OPERACION
    RETURN SYS_REFCURSOR IS OPERACION_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN OPERACION_RESULT
        FOR SELECT  OPERACIONID, DENOMINACIONOPERACION, FECHAREGISTRO, FECHAACTUALIZACION, ESTADOOPERACION FROM OPERACION ORDER BY 1; 
        RETURN OPERACION_RESULT;
    END;
    
     FUNCTION LIST_OPERACION(IN_DENOMINACIONOPERACION IN VARCHAR2)
    RETURN SYS_REFCURSOR IS OPERACION_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN OPERACION_RESULT
        FOR SELECT  OPERACIONID, DENOMINACIONOPERACION FROM OPERACION 
        WHERE DENOMINACIONOPERACION LIKE '%'||IN_DENOMINACIONOPERACION||'%'
        ORDER BY 1; 
        RETURN OPERACION_RESULT;
    END;
    
    PROCEDURE REGISTRAR_OPERACION ( IN_DENOMINACIONOPERACION IN VARCHAR2, PC_DET_RPTA OUT VARCHAR2)
    IS
    IN_OPERACIONID NUMBER;
    IN_FECHAREGISTRO DATE;
    IN_FECHAACTUALIZACION DATE;
    IN_ESTADOOPERACION VARCHAR2(1);
    BEGIN
        IN_FECHAREGISTRO :=SYSDATE;
        IN_FECHAACTUALIZACION  :=SYSDATE;
        IN_ESTADOOPERACION :='1';    
    
        SELECT NVL((MAX(OPERACIONID) +1),0) INTO IN_OPERACIONID FROM OPERACION;
        INSERT INTO OPERACION VALUES (IN_OPERACIONID, IN_DENOMINACIONOPERACION, IN_FECHAREGISTRO, IN_FECHAACTUALIZACION, IN_ESTADOOPERACION);
        
    EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
      PC_DET_RPTA:='ERROR EN REGISTRAR';
        
    END REGISTRAR_OPERACION;
    
    
    
    FUNCTION GET_OPERACION (IN_DENOMINACIONOPERACION IN VARCHAR2)
    RETURN SYS_REFCURSOR IS OPERACION_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN OPERACION_RESULT
        FOR SELECT  OPERACIONID, DENOMINACIONOPERACION, FECHAREGISTRO, FECHAACTUALIZACION, ESTADOOPERACION FROM OPERACION WHERE DENOMINACIONOPERACION=IN_DENOMINACIONOPERACION ORDER BY 1; 
        RETURN OPERACION_RESULT;
    END;
    
    
END WEB_OPERACION;
/


--
-- WEB_UNIDADMEDIDA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_UNIDADMEDIDA
IS 


FUNCTION LIST_UNIDADMEDIDA RETURN SYS_REFCURSOR

IS UNIDADMEDIDA_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN UNIDADMEDIDA_RESULT
        FOR SELECT UNIDADMEDIDAID, DENOMINACION,  ESTADOUNIDADMEDIDA, CODIGOUNIDAD FROM UNIDADMEDIDA ORDER BY 1; 
        RETURN UNIDADMEDIDA_RESULT;
    END LIST_UNIDADMEDIDA;   

END WEB_UNIDADMEDIDA;
/


--
-- WEB_NACIONALIDAD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_NACIONALIDAD IS

    FUNCTION LIST_NACIONALIDAD
    RETURN SYS_REFCURSOR IS NACIONALIDAD_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN NACIONALIDAD_RESULT
        FOR   
            SELECT   NACIONALIDADID, CODIGONACIONALIDAD , DENOMINACION, ESTADONACIONALIDAD   FROM NACIONALIDAD
        ORDER BY 1; 
        RETURN NACIONALIDAD_RESULT;
    END;

    END WEB_NACIONALIDAD;
/


--
-- WEB_UBIGEO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_UBIGEO IS

    FUNCTION LIST_UBIGEO
    RETURN SYS_REFCURSOR IS UBIGEO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN UBIGEO_RESULT
        FOR   
            SELECT  UBIGEOID,  DESCRIPCION,  CODDPTO,  CODPROV,  CODDIST,  FECHAREGISTRO,  FECHAACTUALIZACION  FROM UBIGEO
            WHERE CODPROV='00' AND CODDIST='00' ORDER BY 1;
        RETURN UBIGEO_RESULT;
    END;

    END WEB_UBIGEO;
/


--
-- QB_ENCRIPCION  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.QB_ENCRIPCION iS
    
--**********************************************************************************************************
--** OBJETIVO             : CONTIENE LAS UTILIDADES DE ENCRIPCION Y DESENCRIPCION
--** ESQUEMA              : UTIL
--** NOMBRE               : QB_ENCRIPCION / BODY

--**********************************************************************************************************
      
   CRYPT_RAW   RAW(2000);
   CRYPT_STR   VARCHAR(2000);
   -- LLAVE DE ENCRIPCION
   KEY_ENCRIP  VARCHAR(255):='ASXRFGTR';
 
   --------------------------------------------------------------------------
   -------------------- FUNCION QUE CODIFICA UN TEXTO------------------------
   --------------------------------------------------------------------------
    
   FUNCTION FB_ENCRIPTAR( TXT_ENCRIP VARCHAR2 ) RETURN RAW AS
      L        INTEGER := LENGTH(TXT_ENCRIP);
      I        INTEGER;
      PADBLOCK RAW(2000);
      CLE      RAW(8)  := UTL_RAW.CAST_TO_RAW(KEY_ENCRIP);
     BEGIN
      I := 8-MOD(L,8);
      PADBLOCK := UTL_RAW.CAST_TO_RAW(TXT_ENCRIP||RPAD(CHR(I),I,CHR(I)));
      DBMS_OBFUSCATION_TOOLKIT.DESENCRYPT(
               INPUT          => PADBLOCK,
               KEY            => CLE,
               ENCRYPTED_DATA => CRYPT_RAW );
      RETURN CRYPT_RAW ;
   END;
    
   --------------------------------------------------------------------------
   ------------------- FUNCION QUE DECODIFICA UN TEXTO-----------------------
   --------------------------------------------------------------------------
    
   FUNCTION FB_DESCENCRIPTAR( TXT_DESENCRIP VARCHAR2 ) RETURN VARCHAR2 AS
   L          NUMBER;
   CLE        RAW(8)    := UTL_RAW.CAST_TO_RAW(KEY_ENCRIP);
   CRYPT_RAW  RAW(2000) := UTL_RAW.CAST_TO_RAW(UTL_RAW.CAST_TO_VARCHAR2( TXT_DESENCRIP)) ;
   BEGIN
      DBMS_OBFUSCATION_TOOLKIT.DESDECRYPT(
               INPUT          =>  TXT_DESENCRIP,
               KEY            =>  CLE,
               DECRYPTED_DATA =>  CRYPT_RAW );
      CRYPT_STR := UTL_RAW.CAST_TO_VARCHAR2(CRYPT_RAW);
      L := LENGTH(CRYPT_STR);
      CRYPT_STR := RPAD(CRYPT_STR,L-ASCII(SUBSTR(CRYPT_STR,L)));
      RETURN CRYPT_STR;
   END;
END QB_ENCRIPCION;
/


--
-- WEB_ROLUSUARIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_ROLUSUARIO IS

    FUNCTION LIST_ROLUSUARIO
    RETURN SYS_REFCURSOR IS ROLUSUARIO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ROLUSUARIO_RESULT
        FOR SELECT IDROLUSUARIO,  DENOMINACIONROL,  ESTADOROLUSUARIO FROM ROLUSUARIO
        ORDER BY IDROLUSUARIO ASC;
        RETURN ROLUSUARIO_RESULT;
    END LIST_ROLUSUARIO;
    
    
    
    END WEB_ROLUSUARIO;
/


--
-- WEB_TIPODOCUMENTO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_TIPODOCUMENTO
IS 

   FUNCTION LIST_TIPODOCUMENTO
    RETURN SYS_REFCURSOR IS TIPODOCUMENTO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN TIPODOCUMENTO_RESULT
            FOR SELECT  TIPODOCUMENTOID, DENOMINACION, DESCRIPCION,
             INDVENTA, INDALMACEN, INDALMACENMOV, ESTADOTIPODOCUMENTO FROM TIPODOCUMENTO
            ORDER BY TIPODOCUMENTOID DESC; 
        RETURN TIPODOCUMENTO_RESULT;
    END LIST_TIPODOCUMENTO;
     
 END WEB_TIPODOCUMENTO;
/


--
-- WEB_TIPOMOVIMIENTO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_TIPOMOVIMIENTO
IS 

   FUNCTION LIST_TIPOMOVIMIENTO
    RETURN SYS_REFCURSOR IS TIPOMOVIMIENTO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN TIPOMOVIMIENTO_RESULT
        
            FOR SELECT  TIPOMOVIMIENTOID,  DENOMINACION,  DESCRIPCION, INDENTRADA, 
            INDTRANSFERENCIA, INDDEVOLUCION,  ESTADOTIPOMOVIMIENTO  
            FROM TIPOMOVIMIENTO
            ORDER BY TIPOMOVIMIENTOID DESC; 
            
        RETURN TIPOMOVIMIENTO_RESULT;
    END LIST_TIPOMOVIMIENTO;
     
 END WEB_TIPOMOVIMIENTO;
/


--
-- WEB_VALORTABLA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_VALORTABLA IS

    FUNCTION LIST_VALORTABLA_DOCUMENTO
    RETURN SYS_REFCURSOR IS UBIGEO_DOCUMENTO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN UBIGEO_DOCUMENTO_RESULT
        FOR   
          SELECT   TABLAID,  ITEMID,  DENOMINACION,  DESCORTA,  VALOR  FROM VALORTABLA WHERE TABLAID IN (17,18,19,20,21,22)
        ORDER BY 1; 
        RETURN UBIGEO_DOCUMENTO_RESULT;
    END;
    
        FUNCTION LIST_VALORTABLA_TELEFONO
    RETURN SYS_REFCURSOR IS UBIGEO_TELEFONO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN UBIGEO_TELEFONO_RESULT
        FOR   
            SELECT   TABLAID,  ITEMID,  DENOMINACION,  DESCORTA,  VALOR  FROM VALORTABLA WHERE TABLAID IN (13,14,15)
        ORDER BY 1; 
        RETURN UBIGEO_TELEFONO_RESULT;
    END;
    
    
        FUNCTION LIST_VALORTABLA_TIPO_PERSONA
    RETURN SYS_REFCURSOR IS UBIGEO_TIPO_PERSONA_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN UBIGEO_TIPO_PERSONA_RESULT
        FOR   
            SELECT   TABLAID,  ITEMID,  DENOMINACION,  DESCORTA,  VALOR  FROM VALORTABLA WHERE TABLAID IN (2,3)
        ORDER BY 1; 
        RETURN UBIGEO_TIPO_PERSONA_RESULT;
    END;

    END WEB_VALORTABLA;
/


--
-- CLUSTERES  (Table) 
--
CREATE TABLE MICROSERVICIOS.CLUSTERES
(
  CLUSTERESID      NUMBER(18)                   NOT NULL,
  UBIGEOID         NUMBER(18)                   NOT NULL,
  DENOMINACION     VARCHAR2(150 BYTE),
  DESCRIPCION      VARCHAR2(250 BYTE),
  ESTADOCLUSTERES  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- ENTIDADGARANTE  (Table) 
--
CREATE TABLE MICROSERVICIOS.ENTIDADGARANTE
(
  ENTIDADGARANTEID  NUMBER(18)                  NOT NULL,
  CLUSTERESID       NUMBER(18)                  NOT NULL,
  NOMBREENTIDAD     VARCHAR2(150 BYTE),
  TELEFENOFIJO      VARCHAR2(50 BYTE),
  REPRESENTANTE     VARCHAR2(150 BYTE),
  CARGO             VARCHAR2(100 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- PERSONA  (Table) 
--
CREATE TABLE MICROSERVICIOS.PERSONA
(
  PERSONAID             NUMBER(18)              NOT NULL,
  IDUBIGEO              NUMBER(18)              NOT NULL,
  NACIONALIDADID        NUMBER(18)              NOT NULL,
  NOMBREPERSONA         VARCHAR2(100 BYTE),
  APEPATERNO            VARCHAR2(100 BYTE),
  APMATERNO             VARCHAR2(100 BYTE),
  DOCUMENTOIDENTIDADID  NUMBER(18),
  NUMERODOCUMENTO       VARCHAR2(12 BYTE),
  DIRECCION             VARCHAR2(200 BYTE),
  REFERENCIADIRECCION   VARCHAR2(200 BYTE),
  EMAILPERSONAL         VARCHAR2(100 BYTE),
  NOMBRECOMPLETO        VARCHAR2(250 BYTE),
  IDTIPOTELEFONO        NUMBER(18),
  NUMEROTELEFONO        VARCHAR2(10 BYTE),
  FECHANACIMIENTO       DATE,
  TIPOPERSONAID         INTEGER,
  FECHAREGISTRO         DATE,
  FECHAACTUALIZACION    DATE
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- SOCIO  (Table) 
--
CREATE TABLE MICROSERVICIOS.SOCIO
(
  SOCIOID             NUMBER(18)                NOT NULL,
  PERSONAID           NUMBER(18)                NOT NULL,
  CLUSTERESID         NUMBER(18)                NOT NULL,
  FECHACANCELACION    DATE,
  OBSCANCELACION      VARCHAR2(200 BYTE),
  INDICEESTADO        NUMBER(18),
  FECHASUSPENCION     DATE,
  OBSSUSPENCION       VARCHAR2(200 BYTE),
  ESTADOCUENTA        NUMBER(18),
  FECHAREGISTRO       DATE,
  FECHAACTUALIZACION  DATE
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_CLUSTERES  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_CLUSTERES IS

    FUNCTION LIST_CLUSTERES RETURN SYS_REFCURSOR;

    FUNCTION LIST_CLUSTERES(DEN_CLUSTERES IN VARCHAR2) RETURN SYS_REFCURSOR;
    
    FUNCTION LIST_UBIGEO RETURN SYS_REFCURSOR;
    
    PROCEDURE INS_CLUSTERES(IN_UBIGEOID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE UPD_CLUSTERES(IN_CLUSTERESID NUMBER,IN_UBIGEOID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE DEL_CLUSTERES(IN_CLUSTERESID NUMBER,RPTA OUT VARCHAR2);
    
END WEB_CLUSTERES;
/


--
-- WEB_SOCIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_SOCIO IS

  FUNCTION LISTA_PERSONA_SOCIO  RETURN SYS_REFCURSOR;
  
    FUNCTION LIST_SOCIO RETURN SYS_REFCURSOR;

    FUNCTION LIST_CLUSTERES(IN_DENOMINACION VARCHAR2) RETURN SYS_REFCURSOR;
    
    FUNCTION LIST_PERSONA(IN_DENOMINACION VARCHAR2) RETURN SYS_REFCURSOR;
    
    PROCEDURE INS_SOCIO(IN_PERSONAID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHACANCELACION DATE, IN_OBSCANCELACION VARCHAR2, IN_INDICEESTADO NUMBER, IN_FECHASUSPENCION DATE, IN_OBSSUSPENCION VARCHAR2, IN_ESTADOCUENTA NUMBER,RPTA OUT VARCHAR2);
    
    PROCEDURE UPD_SOCIO(IN_SOCIOID NUMBER,IN_PERSONAID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHACANCELACION DATE, IN_OBSCANCELACION VARCHAR2, IN_INDICEESTADO NUMBER, IN_FECHASUSPENCION DATE, IN_OBSSUSPENCION VARCHAR2, IN_ESTADOCUENTA NUMBER,RPTA OUT VARCHAR2);
    
   -- PROCEDURE DEL_SOCIO(IN_SOCIOID NUMBER,RPTA OUT VARCHAR2);
END WEB_SOCIO;
/


--
-- WEB_PERSONA  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_PERSONA
IS 
    FUNCTION BUSCAR_PERSONA_SOCIO (IN_NOMBRECOMPLETO IN VARCHAR2) RETURN SYS_REFCURSOR;
    FUNCTION LISTA_PERSONA_SOCIO  RETURN SYS_REFCURSOR;
END WEB_PERSONA;
/


--
-- WEB_ENTIDADGARANTE  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_ENTIDADGARANTE
IS

    FUNCTION LIST_ENTIDADGARANTE RETURN SYS_REFCURSOR;

    
    PROCEDURE INS_ENTIDADGARANTE (IN_CLUSTERESID IN  NUMBER, IN_NOMBREENTIDAD IN VARCHAR2,  
    IN_TELEFENOFIJO IN VARCHAR2, IN_REPRESENTANTE IN VARCHAR2, IN_CARGO IN VARCHAR2, RPTA OUT VARCHAR2);
  
END WEB_ENTIDADGARANTE;
/


--
-- WEB_PERSONA_SOCIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_PERSONA_SOCIO
IS 

PROCEDURE REGISTRAR_PERSONA_SOCIO
(
   IN_IDUBIGEO         IN     NUMBER,
  IN_NACIONALIDADID     IN   NUMBER,
  IN_NOMBREPERSONA       IN  VARCHAR2,
  IN_APEPATERNO       IN     VARCHAR2,
  IN_APMATERNO        IN     VARCHAR2,
  IN_DOCUMENTOIDENTIDADID IN  NUMBER,
  IN_NUMERODOCUMENTO     IN  VARCHAR2,
  IN_DIRECCION       IN      VARCHAR2,
  IN_REFERENCIADIRECCION IN  VARCHAR2,
  IN_EMAILPERSONAL      IN   VARCHAR2,

  IN_IDTIPOTELEFONO      IN  NUMBER,
  IN_NUMEROTELEFONO     IN   VARCHAR2,
  IN_FECHANACIMIENTO    IN   DATE,
  IN_TIPOPERSONAID      IN   NUMBER, 


  IN_CLUSTERESID   IN      NUMBER,
  RPTA OUT VARCHAR2
);

END WEB_PERSONA_SOCIO;
/


--
-- WEB_PERSONA_SOCIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_PERSONA_SOCIO
IS 

    PROCEDURE REGISTRAR_PERSONA_SOCIO
    (
      IN_IDUBIGEO         IN     NUMBER,
      IN_NACIONALIDADID     IN   NUMBER,
      IN_NOMBREPERSONA       IN  VARCHAR2,
      IN_APEPATERNO       IN     VARCHAR2,
      IN_APMATERNO        IN     VARCHAR2,
      IN_DOCUMENTOIDENTIDADID IN  NUMBER,
      IN_NUMERODOCUMENTO     IN  VARCHAR2,
      IN_DIRECCION       IN      VARCHAR2,
      IN_REFERENCIADIRECCION IN  VARCHAR2,
      IN_EMAILPERSONAL      IN   VARCHAR2,
      IN_IDTIPOTELEFONO      IN  NUMBER,
      IN_NUMEROTELEFONO     IN   VARCHAR2,
      IN_FECHANACIMIENTO    IN   DATE,
      IN_TIPOPERSONAID      IN   NUMBER, 
      IN_CLUSTERESID   IN      NUMBER,
      RPTA OUT VARCHAR2
    )
    IS 
      IN_PERSONAID  NUMBER;
      IN_NOMBRECOMPLETO        VARCHAR2(250);
     IN_FECHAREGISTROP         DATE;
      IN_FECHAACTUALIZACIONP    DATE;  
      IN_SOCIOID             NUMBER;      
      IN_FECHACANCELACION    DATE;
      IN_OBSCANCELACION      VARCHAR2(200);
      IN_INDICEESTADO        NUMBER;
      IN_FECHASUSPENCION     DATE;
      IN_OBSSUSPENCION       VARCHAR2(200);
      IN_ESTADOCUENTA        NUMBER;
      IN_FECHAREGISTROS       DATE;
      IN_FECHAACTUALIZACIONS  DATE;
      
    BEGIN
        SELECT NVL(MAX(PERSONAID),0)+1 INTO IN_PERSONAID FROM PERSONA;
        IN_NOMBRECOMPLETO:=IN_NOMBREPERSONA||' '||IN_APEPATERNO||' '||IN_APMATERNO;
        IN_FECHAREGISTROP:=SYSDATE;
        IN_FECHAACTUALIZACIONP:=SYSDATE;
        SELECT NVL(MAX(SOCIOID),0)+1 INTO IN_SOCIOID FROM SOCIO;
        IN_FECHACANCELACION:=SYSDATE;
        IN_OBSCANCELACION:='';
        IN_INDICEESTADO:='1';
        IN_FECHASUSPENCION:=SYSDATE;
        IN_OBSSUSPENCION:='';
        IN_ESTADOCUENTA:='1';
        IN_FECHAREGISTROS:=SYSDATE;
        IN_FECHAACTUALIZACIONS:=SYSDATE;
                
        INSERT INTO PERSONA VALUES (
          IN_PERSONAID,
          IN_IDUBIGEO,
          IN_NACIONALIDADID,
          IN_NOMBREPERSONA,
          IN_APEPATERNO,
          IN_APMATERNO,
         IN_DOCUMENTOIDENTIDADID,
          IN_NUMERODOCUMENTO,
          IN_DIRECCION ,
          IN_REFERENCIADIRECCION,
          IN_EMAILPERSONAL,
          IN_NOMBRECOMPLETO,
          IN_IDTIPOTELEFONO,
          IN_NUMEROTELEFONO,
          IN_FECHANACIMIENTO,
          IN_TIPOPERSONAID,
          IN_FECHAREGISTROP,
          IN_FECHAACTUALIZACIONP          
          );
          
          INSERT INTO SOCIO VALUES (
          IN_SOCIOID,
          IN_PERSONAID,
          IN_CLUSTERESID,
          IN_FECHACANCELACION,
          IN_OBSCANCELACION,
          IN_INDICEESTADO,
          IN_FECHASUSPENCION,
          IN_OBSSUSPENCION ,
          IN_ESTADOCUENTA,
          IN_FECHAREGISTROS,
          IN_FECHAACTUALIZACIONS  
          );
            COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END  REGISTRAR_PERSONA_SOCIO;

END WEB_PERSONA_SOCIO;
/


--
-- WEB_CLUSTERES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_CLUSTERES IS

    FUNCTION LIST_CLUSTERES
    RETURN SYS_REFCURSOR IS CLUSTERES_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CLUSTERES_RESULT
        FOR SELECT A.CLUSTERESID, A.UBIGEOID,B.DESCRIPCION AS LOCALIDAD, A.DENOMINACION, A.DESCRIPCION, A.ESTADOCLUSTERES
        FROM CLUSTERES A INNER JOIN UBIGEO B ON A.UBIGEOID=B.UBIGEOID       
        ORDER BY A.CLUSTERESID DESC; 
        RETURN CLUSTERES_RESULT;
    END;
    
    
    FUNCTION LIST_CLUSTERES( DEN_CLUSTERES VARCHAR2 ) 
    RETURN SYS_REFCURSOR IS CLUSTERES_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CLUSTERES_RESULT
        FOR SELECT CLUSTERESID, UBIGEOID, DENOMINACION, DESCRIPCION, ESTADOCLUSTERES
        FROM CLUSTERES WHERE DENOMINACION = DEN_CLUSTERES ORDER BY 1; 
        RETURN CLUSTERES_RESULT;
    END;

    FUNCTION LIST_UBIGEO
    RETURN SYS_REFCURSOR IS UBIGEO_RESULT SYS_REFCURSOR;
    BEGIN
        OPEN  UBIGEO_RESULT 
        FOR SELECT UBIGEOID, DESCRIPCION FROM UBIGEO WHERE CODPROV='00' AND CODDIST='00' ORDER BY 1;
        RETURN  UBIGEO_RESULT ;
    END;

    PROCEDURE INS_CLUSTERES(IN_UBIGEOID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2)
    IS 
    V_CLUSTERESID CLUSTERES.CLUSTERESID%TYPE;
    ESTADOCLUSTERES CLUSTERES.ESTADOCLUSTERES%TYPE:='1';
        BEGIN /*INSERCION DE LA TABLA CARGO*/         
            SELECT NVL(MAX(CLUSTERESID),0)+1 INTO V_CLUSTERESID FROM CLUSTERES;
            INSERT INTO CLUSTERES(CLUSTERESID, UBIGEOID, DENOMINACION, DESCRIPCION, ESTADOCLUSTERES) 
            VALUES (V_CLUSTERESID, IN_UBIGEOID, IN_DENOMINACION, IN_DESCRIPCION, ESTADOCLUSTERES);
            COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
        END;
    PROCEDURE UPD_CLUSTERES(IN_CLUSTERESID NUMBER,IN_UBIGEOID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2)
    IS
    BEGIN
            UPDATE CLUSTERES SET
            UBIGEOID=IN_UBIGEOID,
            DENOMINACION=IN_DENOMINACION,
            DESCRIPCION=IN_DESCRIPCION
            WHERE CLUSTERESID=IN_CLUSTERESID;
            COMMIT;
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
              
    END;
    
    PROCEDURE DEL_CLUSTERES(IN_CLUSTERESID NUMBER,RPTA OUT VARCHAR2)
    IS
    BEGIN
    UPDATE CLUSTERES SET
    ESTADOCLUSTERES='0'
    WHERE CLUSTERESID=IN_CLUSTERESID;
    --COMMIT;
    RPTA:='SE ELIMINO CORRECTAMENTE EL CLUSTER SELECCIONADO';
    EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);  
             RPTA:='ERROR EN REGISTRAR';
            -- ROLLBACK;  
    END;
    
    
    END WEB_CLUSTERES;
/


--
-- WEB_PERSONA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_PERSONA
IS 
    FUNCTION BUSCAR_PERSONA_SOCIO (IN_NOMBRECOMPLETO IN VARCHAR2) RETURN SYS_REFCURSOR
    IS PERSONA_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN PERSONA_RESULT
            FOR SELECT  PERSONAID, NOMBRECOMPLETO FROM PERSONA 
            WHERE NOMBRECOMPLETO LIKE '%'||IN_NOMBRECOMPLETO||'%'
            ORDER BY 1; 
            RETURN PERSONA_RESULT;
        END BUSCAR_PERSONA_SOCIO;   


    FUNCTION LISTA_PERSONA_SOCIO RETURN SYS_REFCURSOR
    IS PERSONA_SOCIO_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN PERSONA_SOCIO_RESULT
            FOR SELECT P.PERSONAID, P.NOMBRECOMPLETO FROM PERSONA P INNER JOIN SOCIO S ON P.PERSONAID=S.PERSONAID
            ORDER BY 1; 
            RETURN PERSONA_SOCIO_RESULT;
        END LISTA_PERSONA_SOCIO;   
        
        
END WEB_PERSONA;
/


--
-- WEB_SOCIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_SOCIO IS

    FUNCTION LISTA_PERSONA_SOCIO RETURN SYS_REFCURSOR
    IS PERSONA_SOCIO_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN PERSONA_SOCIO_RESULT
            FOR SELECT S.SOCIOID , P.NOMBRECOMPLETO FROM PERSONA P INNER JOIN SOCIO S ON P.PERSONAID=S.PERSONAID
            ORDER BY 1; 
            RETURN PERSONA_SOCIO_RESULT;
        END LISTA_PERSONA_SOCIO;   
        

    FUNCTION LIST_SOCIO 
    RETURN SYS_REFCURSOR IS SOCIO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN SOCIO_RESULT
        FOR SELECT S.SOCIOID, S.PERSONAID,S.CLUSTERESID,C.DENOMINACION ,P.NOMBRECOMPLETO,
         S.FECHAREGISTRO, S.ESTADOCUENTA FROM SOCIO S INNER JOIN PERSONA P ON S.PERSONAID=P.PERSONAID
           INNER JOIN CLUSTERES C ON S.CLUSTERESID=C.CLUSTERESID
           ORDER BY P.PERSONAID;  
              
        RETURN SOCIO_RESULT;
    END;

    FUNCTION LIST_CLUSTERES(IN_DENOMINACION VARCHAR2) 
    RETURN SYS_REFCURSOR IS CLUSTERES_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CLUSTERES_RESULT
        FOR SELECT  CLUSTERESID, DENOMINACION FROM CLUSTERES 
        WHERE DENOMINACION LIKE '%'||IN_DENOMINACION||'%'
        ORDER BY 1; 
        RETURN CLUSTERES_RESULT;
    END;
    
    FUNCTION LIST_PERSONA(IN_DENOMINACION VARCHAR2) 
    RETURN SYS_REFCURSOR IS PERSONA_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN PERSONA_RESULT
        FOR SELECT  PERSONAID, (NOMBREPERSONA||' '|| APEPATERNO ||' '||APMATERNO)AS DENOMINACION FROM PERSONA 
        WHERE (NOMBREPERSONA||' '|| APEPATERNO ||' '||APMATERNO) LIKE '%'||IN_DENOMINACION||'%'
        ORDER BY 1; 
        RETURN PERSONA_RESULT;
    END;
    
    PROCEDURE INS_SOCIO(IN_PERSONAID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHACANCELACION DATE, IN_OBSCANCELACION VARCHAR2, IN_INDICEESTADO NUMBER, IN_FECHASUSPENCION DATE, IN_OBSSUSPENCION VARCHAR2, IN_ESTADOCUENTA NUMBER,RPTA OUT VARCHAR2)
    IS
    V_SOCIOID SOCIO.SOCIOID%TYPE;
    IN_FECHAREGISTRO SOCIO.FECHAREGISTRO%TYPE:=SYSDATE;
    BEGIN
    SELECT MAX(NVL(SOCIOID,0))+1 INTO V_SOCIOID FROM SOCIO;
    INSERT INTO SOCIO (SOCIOID, PERSONAID, CLUSTERESID,FECHACANCELACION, OBSCANCELACION, INDICEESTADO,FECHASUSPENCION, OBSSUSPENCION, ESTADOCUENTA,FECHAREGISTRO) 
    VALUES (V_SOCIOID ,IN_PERSONAID , IN_CLUSTERESID,TO_DATE(IN_FECHACANCELACION,'MM/DD/YYYY'),IN_OBSCANCELACION ,IN_INDICEESTADO ,TO_DATE(IN_FECHASUSPENCION,'MM/DD/YYYY'), IN_OBSSUSPENCION,IN_ESTADOCUENTA ,IN_FECHAREGISTRO);
    COMMIT;
       EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
    PROCEDURE UPD_SOCIO(IN_SOCIOID NUMBER,IN_PERSONAID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHACANCELACION DATE, IN_OBSCANCELACION VARCHAR2, IN_INDICEESTADO NUMBER, IN_FECHASUSPENCION DATE, IN_OBSSUSPENCION VARCHAR2, IN_ESTADOCUENTA NUMBER,RPTA OUT VARCHAR2)
    IS 
    BEGIN
            UPDATE SOCIO
        SET    PERSONAID          = IN_PERSONAID,
               CLUSTERESID        = IN_CLUSTERESID,
               FECHACANCELACION   = TO_DATE(IN_FECHACANCELACION,'MM/DD/YYYY'),
               OBSCANCELACION     = IN_OBSCANCELACION,
               INDICEESTADO       = IN_INDICEESTADO,
               FECHASUSPENCION    = TO_DATE(IN_FECHASUSPENCION,'MM/DD/YYYY'),
               OBSSUSPENCION      = IN_OBSSUSPENCION,
               ESTADOCUENTA       = IN_ESTADOCUENTA,
               FECHAACTUALIZACION = SYSDATE
        WHERE  SOCIOID            = IN_SOCIOID;
       COMMIT;
       EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
        END UPD_SOCIO;
END WEB_SOCIO;
/


--
-- WEB_ENTIDADGARANTE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_ENTIDADGARANTE IS

    FUNCTION LIST_ENTIDADGARANTE
    RETURN SYS_REFCURSOR IS ENTIDADGARANTE_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ENTIDADGARANTE_RESULT
        FOR SELECT EG.ENTIDADGARANTEID, C.DENOMINACION , EG.NOMBREENTIDAD, EG.TELEFENOFIJO, EG.REPRESENTANTE, EG.CARGO
        FROM ENTIDADGARANTE EG INNER JOIN CLUSTERES C ON C.CLUSTERESID=EG.CLUSTERESID ORDER BY EG.ENTIDADGARANTEID DESC;
        RETURN ENTIDADGARANTE_RESULT;
    END LIST_ENTIDADGARANTE;
    
        
    PROCEDURE INS_ENTIDADGARANTE(IN_CLUSTERESID IN  NUMBER, IN_NOMBREENTIDAD IN VARCHAR2,  
    IN_TELEFENOFIJO IN VARCHAR2, IN_REPRESENTANTE IN VARCHAR2, IN_CARGO IN VARCHAR2, RPTA OUT VARCHAR2
    )
    IS
    IN_ENTIDADGARANTEID ENTIDADGARANTE.ENTIDADGARANTEID%TYPE;

    BEGIN
        SELECT NVL(MAX(ENTIDADGARANTEID),0)+1 INTO IN_ENTIDADGARANTEID FROM ENTIDADGARANTE;
        INSERT INTO ENTIDADGARANTE (ENTIDADGARANTEID, CLUSTERESID, NOMBREENTIDAD, TELEFENOFIJO, REPRESENTANTE, CARGO )
        VALUES(IN_ENTIDADGARANTEID, IN_CLUSTERESID, IN_NOMBREENTIDAD, IN_TELEFENOFIJO, IN_REPRESENTANTE, IN_CARGO);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END INS_ENTIDADGARANTE;
       
END WEB_ENTIDADGARANTE;
/


--
-- USUARIO  (Table) 
--
CREATE TABLE MICROSERVICIOS.USUARIO
(
  USUARIOID      NUMBER(18)                     NOT NULL,
  SOCIOID        NUMBER(18)                     NOT NULL,
  ROLUSUARIOID   NUMBER(18)                     NOT NULL,
  NOMBREUSUARIO  VARCHAR2(100 BYTE),
  CLAVEUSUARIO   VARCHAR2(150 BYTE),
  ESTADOUSUARIO  VARCHAR2(5 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- ALMACEN  (Table) 
--
CREATE TABLE MICROSERVICIOS.ALMACEN
(
  ALMACENID          NUMBER(18)                 NOT NULL,
  CLUSTERESID        NUMBER(18)                 NOT NULL,
  DENOMINACION       VARCHAR2(100 BYTE),
  DESCRIPCION        VARCHAR2(250 BYTE),
  INDESTADOAPERTURA  VARCHAR2(1 BYTE),
  FECHAAPERTURA      DATE,
  ESTADOALMACEN      VARCHAR2(5 BYTE),
  HORAREFERENCIA     VARCHAR2(100 BYTE),
  CANTIDADVIA        NUMBER(18),
  COSTOTRANSPORTE    NUMBER(16,2),
  TELEFONOALMACEN    VARCHAR2(20 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- CLIENTE  (Table) 
--
CREATE TABLE MICROSERVICIOS.CLIENTE
(
  CLIENTEID      NUMBER(18)                     NOT NULL,
  PERSONAID      NUMBER(18)                     NOT NULL,
  CODIGOPOSTAL   VARCHAR2(20 BYTE),
  REGION         VARCHAR2(50 BYTE),
  NOMBRECLIENTE  VARCHAR2(50 BYTE),
  CLAVECLIENTE   VARCHAR2(50 BYTE),
  ESTADOCLIENTE  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- RESPONSABLE  (Table) 
--
CREATE TABLE MICROSERVICIOS.RESPONSABLE
(
  RESPONSABLEID      NUMBER(18)                 NOT NULL,
  SOCIOID            NUMBER(18)                 NOT NULL,
  CLUSTERESID        NUMBER(18)                 NOT NULL,
  FECHAINICIO        DATE,
  FECHAFIN           DATE,
  ESTADORESPONSABLE  VARCHAR2(5 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- SUGERENCIA  (Table) 
--
CREATE TABLE MICROSERVICIOS.SUGERENCIA
(
  SUGERENCIAID     NUMBER(18)                   NOT NULL,
  CLIENTEID        NUMBER(18)                   NOT NULL,
  CLUSTERESID      NUMBER(18)                   NOT NULL,
  TEXTOSUGERENCIA  VARCHAR2(500 BYTE),
  FECHASUGERENCIA  DATE,
  CLASIFICACION    VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_CLIENTE  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_CLIENTE
IS

    PROCEDURE AUTENTICAR_CLIENTE(IN_NOMBRECLIENTE IN VARCHAR2, IN_CLAVECLIENTE IN VARCHAR2, RPTA OUT VARCHAR2) ;
    
    FUNCTION LIST_CLIENTE RETURN SYS_REFCURSOR;
    
END WEB_CLIENTE;
/


--
-- WEB_PERSONA_CLIENTE  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_PERSONA_CLIENTE 
IS

     PROCEDURE REGISTRO_PERSONA_CLIENTE 
     ( 
      IN_IDUBIGEO IN NUMBER  ,
      IN_NACIONALIDADID IN NUMBER,
      IN_NOMBREPERSONA IN VARCHAR2,
      IN_APEPATERNO IN  VARCHAR2,
      IN_APMATERNO IN VARCHAR2,
      IN_DOCUMENTOIDENTIDADID  IN  NUMBER,
      IN_NUMERODOCUMENTO IN VARCHAR2,
      IN_DIRECCION IN VARCHAR2,
      IN_REFERENCIADIRECCION IN VARCHAR2,
      IN_EMAILPERSONAL  IN VARCHAR2,      
      IN_IDTIPOTELEFONO  IN  NUMBER,
      IN_NUMEROTELEFONO  IN VARCHAR2,
      IN_FECHANACIMIENTO IN DATE,
      IN_TIPOPERSONAID IN NUMBER, 
      IN_CODIGOPOSTAL IN VARCHAR2,
      IN_REGION IN  VARCHAR2,
      IN_NOMBRECLIENTE  IN VARCHAR2,
      IN_CLAVECLIENTE IN VARCHAR2,
      PC_DET_RPTA OUT VARCHAR2
     );
       
END WEB_PERSONA_CLIENTE;
/


--
-- WEB_RESPONSABLE  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_RESPONSABLE
IS
     PROCEDURE INS_RESPONSABLE(IN_SOCIOID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHAINICIO IN DATE, IN_FECHAFIN IN DATE,RPTA OUT VARCHAR2);

    FUNCTION LIST_RESPONSABLE RETURN SYS_REFCURSOR;
    
  END WEB_RESPONSABLE;
/


--
-- WEB_USUARIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_USUARIO AS


    PROCEDURE VALIDAR_USUARIO (IN_NOMBREUSUARIO IN VARCHAR2, IN_CLAVEUSUARIO IN VARCHAR2, RPTA OUT VARCHAR2);
  
    PROCEDURE AGREGAR_USUARIO (IN_SOCIOID IN NUMBER, IN_ROLUSUARIOID IN NUMBER, IN_NOMBREUSUARIO IN VARCHAR2, IN_CLAVEUSUARIO IN VARCHAR2, RPTA OUT VARCHAR2);
    
    FUNCTION LIST_USUARIO RETURN SYS_REFCURSOR;
    
END WEB_USUARIO;
/


--
-- WEB_ALMACEN  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_ALMACEN 
IS


    FUNCTION LIST_ALMACEN RETURN SYS_REFCURSOR;

     FUNCTION LIST_CLUSTERES RETURN SYS_REFCURSOR;
    
    PROCEDURE INS_ALMACEN(IN_CLUSTERESID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2, IN_INDESTADOAPERTURA IN VARCHAR2,
     IN_HORAREFERENCIA IN VARCHAR2, IN_CANTIDADVIA IN NUMBER, IN_COSTOTRANSPORTE IN NUMBER, IN_TELEFONOALMACEN IN VARCHAR2, RPTA OUT VARCHAR2);
    
    PROCEDURE UPD_ALMACEN(IN_ALMACENID NUMBER,IN_CLUSTERESID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2, IN_INDESTADOAPERTURA VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE DEL_ALMACEN(IN_ALMACENID NUMBER,RPTA OUT VARCHAR2);
    
    FUNCTION LIST_ALMACEN(IN_CLUSTERESID IN NUMBER) RETURN SYS_REFCURSOR;
    
END WEB_ALMACEN;
/


--
-- WEB_SUGERENCIA  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_SUGERENCIA IS

       PROCEDURE INS_SUGERENCIA(IN_CLIENTEID IN NUMBER, IN_CLUSTERESID IN NUMBER,  IN_TEXTOSUGERENCIA IN VARCHAR2,  IN_CLASIFICACION  IN  VARCHAR2,RPTA OUT VARCHAR2);
 
END WEB_SUGERENCIA;
/


--
-- WEB_USUARIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_USUARIO IS

  
        PROCEDURE VALIDAR_USUARIO(IN_NOMBREUSUARIO IN VARCHAR2, IN_CLAVEUSUARIO IN VARCHAR2, RPTA OUT VARCHAR2) 
        IS
           IN_NOMBRECOMPLETO VARCHAR2(150);
           CLAVE VARCHAR2(50);
           DESCEN_CLAVE USUARIO.CLAVEUSUARIO%TYPE;
        BEGIN
           SELECT CLAVEUSUARIO INTO CLAVE FROM USUARIO WHERE NOMBREUSUARIO= IN_NOMBREUSUARIO;
           SELECT QB_ENCRIPCION.FB_DESCENCRIPTAR(CLAVE) INTO DESCEN_CLAVE FROM DUAL;            
        IF DESCEN_CLAVE=IN_CLAVEUSUARIO
        THEN
            RPTA:='OK';
            SELECT P.NOMBRECOMPLETO  INTO IN_NOMBRECOMPLETO
            FROM PERSONA P INNER JOIN SOCIO S ON P.PERSONAID =S.PERSONAID 
            INNER JOIN USUARIO U ON U.SOCIOID=S.SOCIOID
            WHERE U.NOMBREUSUARIO=IN_NOMBREUSUARIO;
        ELSE  RPTA:='ERR';
        END IF;        
        COMMIT;        
        EXCEPTION
            WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20100,'ERROR AL INTENTAR INGRESAR');          
        END VALIDAR_USUARIO;


    PROCEDURE AGREGAR_USUARIO (IN_SOCIOID IN NUMBER, IN_ROLUSUARIOID IN NUMBER, IN_NOMBREUSUARIO IN VARCHAR2, IN_CLAVEUSUARIO IN VARCHAR2, RPTA OUT VARCHAR2)
        IS
        IN_USUARIOID USUARIO.USUARIOID%TYPE;
        IN_ESTADOUSUARIO USUARIO.ESTADOUSUARIO%TYPE:='ACT';
        ECRIP_CLAVEUSUARIO USUARIO.CLAVEUSUARIO%TYPE;
        
        BEGIN
            SELECT QB_ENCRIPCION.FB_ENCRIPTAR(IN_CLAVEUSUARIO) INTO ECRIP_CLAVEUSUARIO FROM DUAL;
            SELECT NVL(MAX(USUARIOID),0)+1 INTO IN_USUARIOID FROM USUARIO;
            INSERT INTO USUARIO (USUARIOID,SOCIOID,ROLUSUARIOID, NOMBREUSUARIO,CLAVEUSUARIO,ESTADOUSUARIO)
            VALUES(IN_USUARIOID,IN_SOCIOID,IN_ROLUSUARIOID, IN_NOMBREUSUARIO,ECRIP_CLAVEUSUARIO,IN_ESTADOUSUARIO);
            COMMIT; 
                EXCEPTION
                WHEN OTHERS THEN
                 RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
                 RPTA:='ERROR EN REGISTRAR';
                 ROLLBACK;
        END;
        
        
      FUNCTION LIST_USUARIO
        RETURN SYS_REFCURSOR IS USUARIO_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN USUARIO_RESULT
            FOR SELECT U.USUARIOID, P.NOMBRECOMPLETO,  U.ESTADOUSUARIO FROM USUARIO U INNER JOIN SOCIO S ON S.SOCIOID=U.SOCIOID
            INNER JOIN PERSONA P ON S.PERSONAID=P.PERSONAID
            ORDER BY U.USUARIOID DESC;
            RETURN USUARIO_RESULT;
        END LIST_USUARIO;
    
END WEB_USUARIO;
/


--
-- WEB_ALMACEN  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_ALMACEN IS

    FUNCTION LIST_ALMACEN
    RETURN SYS_REFCURSOR IS ALMACEN_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ALMACEN_RESULT
        FOR SELECT A.ALMACENID, B.DENOMINACION, A.DENOMINACION, 
        A.DESCRIPCION, (CASE A.INDESTADOAPERTURA WHEN '0' THEN 'C' ELSE 'A' END) AS INDESTADOAPERTURA,
         TO_DATE(A.FECHAAPERTURA,'DD/MM/YY'), A.ESTADOALMACEN
        FROM ALMACEN A INNER JOIN CLUSTERES B ON A.CLUSTERESID=B.CLUSTERESID
        ORDER BY A.ALMACENID DESC;
        RETURN ALMACEN_RESULT;
    END;
    
    FUNCTION LIST_CLUSTERES
    RETURN SYS_REFCURSOR IS CLUSTERES_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CLUSTERES_RESULT
        FOR SELECT DISTINCT A.CLUSTERESID, A.DENOMINACION  FROM CLUSTERES A 
        ORDER BY 1; 
        RETURN CLUSTERES_RESULT;
    END;
    
    PROCEDURE INS_ALMACEN(IN_CLUSTERESID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2, IN_INDESTADOAPERTURA IN VARCHAR2,
     IN_HORAREFERENCIA IN VARCHAR2, IN_CANTIDADVIA IN NUMBER, IN_COSTOTRANSPORTE IN NUMBER,IN_TELEFONOALMACEN IN VARCHAR2, RPTA OUT VARCHAR2)
    IS
    V_ALMACENID ALMACEN.ALMACENID%TYPE;
    ESTADOALMACEN ALMACEN.ESTADOALMACEN%TYPE:='INAC';
    IN_FECHAAPERTURA ALMACEN.FECHAAPERTURA%TYPE:=SYSDATE;
    BEGIN
        SELECT NVL(MAX(ALMACENID),0)+1 INTO V_ALMACENID FROM ALMACEN;
        INSERT INTO ALMACEN (ALMACENID, CLUSTERESID, DENOMINACION, DESCRIPCION, INDESTADOAPERTURA, FECHAAPERTURA, ESTADOALMACEN, HORAREFERENCIA, CANTIDADVIA, COSTOTRANSPORTE, TELEFONOALMACEN)
        VALUES(V_ALMACENID,IN_CLUSTERESID,IN_DENOMINACION, IN_DESCRIPCION,IN_INDESTADOAPERTURA,IN_FECHAAPERTURA,ESTADOALMACEN,  IN_HORAREFERENCIA, IN_CANTIDADVIA, IN_COSTOTRANSPORTE, IN_TELEFONOALMACEN);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
    PROCEDURE UPD_ALMACEN(IN_ALMACENID NUMBER,IN_CLUSTERESID NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2, IN_INDESTADOAPERTURA VARCHAR2,RPTA OUT VARCHAR2)
    IS
    BEGIN 
    UPDATE ALMACEN SET 
                    CLUSTERESID=IN_CLUSTERESID,
                    DENOMINACION=IN_DENOMINACION,
                    DESCRIPCION=IN_DESCRIPCION,
                    INDESTADOAPERTURA=IN_INDESTADOAPERTURA,
                    FECHAAPERTURA=SYSDATE
                    WHERE ALMACENID=IN_ALMACENID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    
    END;
    
    PROCEDURE DEL_ALMACEN(IN_ALMACENID NUMBER,RPTA OUT VARCHAR2)
    IS 
    BEGIN 
    UPDATE ALMACEN SET                    
                    FECHAAPERTURA=SYSDATE,
                    ESTADOALMACEN='0'
                    WHERE ALMACENID=IN_ALMACENID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
        FUNCTION LIST_ALMACEN(IN_CLUSTERESID IN NUMBER) RETURN SYS_REFCURSOR
        IS ALMACEN_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN ALMACEN_RESULT
            FOR SELECT   ALMACENID, CLUSTERESID, DENOMINACION,  DESCRIPCION,  INDESTADOAPERTURA,  FECHAAPERTURA,  ESTADOALMACEN   
            FROM ALMACEN WHERE CLUSTERESID=IN_CLUSTERESID 
            ORDER BY ALMACENID DESC;
            RETURN ALMACEN_RESULT;
        END LIST_ALMACEN;
    
END WEB_ALMACEN;
/


--
-- WEB_CLIENTE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_CLIENTE
IS

        PROCEDURE AUTENTICAR_CLIENTE(IN_NOMBRECLIENTE IN VARCHAR2, IN_CLAVECLIENTE IN VARCHAR2, RPTA OUT VARCHAR2) 
        IS
        IN_NOMBRECOMPLETO VARCHAR2(150);
           CLAVE VARCHAR2(50);
        BEGIN
           SELECT CLAVECLIENTE INTO CLAVE FROM CLIENTE WHERE NOMBRECLIENTE= IN_NOMBRECLIENTE;            
        IF CLAVE=IN_CLAVECLIENTE
        THEN
            RPTA:='OK';
           SELECT P.NOMBRECOMPLETO INTO  IN_NOMBRECOMPLETO FROM PERSONA P INNER JOIN CLIENTE C ON P.PERSONAID=C.PERSONAID WHERE C.NOMBRECLIENTE=IN_NOMBRECLIENTE;
        ELSE  RPTA:='ERR';
        END IF;        
        COMMIT;        
        EXCEPTION
            WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20100,'ERROR AL INTENTAR INGRESAR');          
        END AUTENTICAR_CLIENTE;


    FUNCTION LIST_CLIENTE
    RETURN SYS_REFCURSOR IS CLIENTE_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CLIENTE_RESULT
        FOR SELECT C.CLIENTEID, P.NOMBRECOMPLETO,  P.DIRECCION, C.REGION , 
        P.EMAILPERSONAL, P.NUMEROTELEFONO , N.DENOMINACION, P.FECHAREGISTRO
        FROM PERSONA P INNER JOIN CLIENTE C ON P.PERSONAID=C.PERSONAID
        INNER JOIN NACIONALIDAD N ON P.NACIONALIDADID=N.NACIONALIDADID 
        ORDER BY C.CLIENTEID DESC ; 
        RETURN CLIENTE_RESULT;
    END;
    
END WEB_CLIENTE;
/


--
-- WEB_PERSONA_CLIENTE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_PERSONA_CLIENTE
 IS
 PROCEDURE REGISTRO_PERSONA_CLIENTE (
  IN_IDUBIGEO IN NUMBER  ,
  IN_NACIONALIDADID IN NUMBER,
  IN_NOMBREPERSONA IN VARCHAR2,
  IN_APEPATERNO IN VARCHAR2,
  IN_APMATERNO IN VARCHAR2,
  IN_DOCUMENTOIDENTIDADID IN NUMBER,
  IN_NUMERODOCUMENTO IN VARCHAR2,
  IN_DIRECCION IN VARCHAR2,
  IN_REFERENCIADIRECCION IN VARCHAR2,
  IN_EMAILPERSONAL IN VARCHAR2, 
  IN_IDTIPOTELEFONO IN NUMBER,
  IN_NUMEROTELEFONO  IN VARCHAR2,
  IN_FECHANACIMIENTO IN DATE,
  IN_TIPOPERSONAID IN NUMBER,
  IN_CODIGOPOSTAL IN VARCHAR2,
  IN_REGION IN VARCHAR2,
  IN_NOMBRECLIENTE IN VARCHAR2,
  IN_CLAVECLIENTE IN VARCHAR2,
  PC_DET_RPTA OUT VARCHAR2
  )
  IS
       IN_PERSONAID NUMBER ;
       IN_FECHAREGISTRO DATE;
       IN_FECHAACTUALIZACION DATE;
       IN_CLIENTEID NUMBER;
       IN_ESTADOCLIENTE VARCHAR2(1); 
       IN_NOMBRECOMPLETO  VARCHAR2(150);
      
    BEGIN

        IN_FECHAREGISTRO :=SYSDATE;
        IN_FECHAACTUALIZACION  :=SYSDATE;        
        IN_ESTADOCLIENTE :='1';    
        IN_NOMBRECOMPLETO:=  IN_NOMBREPERSONA  || ' ' || IN_APEPATERNO ||' ' || IN_APMATERNO;
    
        SELECT NVL((MAX(PERSONAID) +1),1) INTO IN_PERSONAID FROM PERSONA;
        INSERT INTO PERSONA VALUES (
                  IN_PERSONAID,
                  IN_IDUBIGEO,
                  IN_NACIONALIDADID,
                  IN_NOMBREPERSONA,
                  IN_APEPATERNO,
                  IN_APMATERNO,
                  IN_DOCUMENTOIDENTIDADID,
                  IN_NUMERODOCUMENTO,
                  IN_DIRECCION,
                  IN_REFERENCIADIRECCION,
                  IN_EMAILPERSONAL,
                  IN_NOMBRECOMPLETO,
                  IN_IDTIPOTELEFONO,
                  IN_NUMEROTELEFONO,
                  IN_FECHANACIMIENTO,
                  IN_TIPOPERSONAID,
                  IN_FECHAREGISTRO,
                  IN_FECHAACTUALIZACION   
        );
          SELECT NVL((MAX(CLIENTEID) +1),1) INTO IN_CLIENTEID FROM CLIENTE;
          INSERT INTO CLIENTE VALUES (
              IN_CLIENTEID,
              IN_PERSONAID,
              IN_CODIGOPOSTAL,
              IN_REGION,
              IN_NOMBRECLIENTE,
              IN_CLAVECLIENTE,
              IN_ESTADOCLIENTE 
        );   
       EXCEPTION
      WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
      PC_DET_RPTA:='ERROR EN REGISTRAR';
    END REGISTRO_PERSONA_CLIENTE;
 
END WEB_PERSONA_CLIENTE;
/


--
-- WEB_RESPONSABLE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_RESPONSABLE IS

       PROCEDURE INS_RESPONSABLE(IN_SOCIOID NUMBER, IN_CLUSTERESID NUMBER, IN_FECHAINICIO IN DATE, IN_FECHAFIN IN DATE, RPTA OUT VARCHAR2)
        IS
        IN_RESPONSABLEID RESPONSABLE.RESPONSABLEID%TYPE;
        IN_ESTADORESPONSABLE RESPONSABLE.ESTADORESPONSABLE%TYPE:='INAC';

        BEGIN
            SELECT NVL(MAX(RESPONSABLEID),0)+1 INTO IN_RESPONSABLEID FROM RESPONSABLE;
            INSERT INTO RESPONSABLE (RESPONSABLEID, SOCIOID, CLUSTERESID, FECHAINICIO, FECHAFIN, ESTADORESPONSABLE)
            VALUES(IN_RESPONSABLEID, IN_SOCIOID, IN_CLUSTERESID, IN_FECHAINICIO, IN_FECHAFIN, IN_ESTADORESPONSABLE);
            COMMIT; 
                EXCEPTION
                WHEN OTHERS THEN
                 RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
                 RPTA:='ERROR EN REGISTRAR';
                 ROLLBACK;
        END INS_RESPONSABLE;

        FUNCTION LIST_RESPONSABLE
        RETURN SYS_REFCURSOR IS RESPONSABLE_RESULT SYS_REFCURSOR; 
        BEGIN 
            OPEN RESPONSABLE_RESULT
            FOR SELECT R.RESPONSABLEID, P.NOMBRECOMPLETO, C.DENOMINACION, R.FECHAINICIO, R.FECHAFIN, R.ESTADORESPONSABLE
             FROM RESPONSABLE R INNER JOIN SOCIO S ON S.SOCIOID=R.SOCIOID
            INNER JOIN PERSONA P ON P.PERSONAID=S.PERSONAID
            INNER JOIN CLUSTERES C ON C.CLUSTERESID=R.CLUSTERESID

           ORDER BY R.RESPONSABLEID DESC;
            RETURN RESPONSABLE_RESULT;
        END LIST_RESPONSABLE;
    
        
END WEB_RESPONSABLE;
/


--
-- WEB_SUGERENCIA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_SUGERENCIA IS


       PROCEDURE INS_SUGERENCIA(IN_CLIENTEID IN NUMBER, IN_CLUSTERESID IN NUMBER,  IN_TEXTOSUGERENCIA IN VARCHAR2,  IN_CLASIFICACION  IN  VARCHAR2,RPTA OUT VARCHAR2)
       IS
        IN_SUGERENCIAID SUGERENCIA.SUGERENCIAID%TYPE;
        IN_FECHASUGERENCIA SUGERENCIA.FECHASUGERENCIA%TYPE:=SYSDATE;
    BEGIN
        SELECT NVL(MAX(SUGERENCIAID),0)+1 INTO IN_SUGERENCIAID FROM SUGERENCIA;
        INSERT INTO SUGERENCIA (SUGERENCIAID, CLIENTEID, CLUSTERESID, TEXTOSUGERENCIA, FECHASUGERENCIA, CLASIFICACION)
        VALUES(IN_SUGERENCIAID, IN_CLIENTEID, IN_CLUSTERESID, IN_TEXTOSUGERENCIA, IN_FECHASUGERENCIA, IN_CLASIFICACION);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END INS_SUGERENCIA;
 
END WEB_SUGERENCIA;
/


--
-- VARIEDAD  (Table) 
--
CREATE TABLE MICROSERVICIOS.VARIEDAD
(
  VARIEDADID      NUMBER(18)                    NOT NULL,
  ALMACENID       NUMBER(18)                    NOT NULL,
  DENOMINACION    VARCHAR2(100 BYTE),
  DESCRIPCION     VARCHAR2(200 BYTE),
  IMAGEN          LONG RAW,
  ESTADOVARIEDAD  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- VARIEDADCALIBRE  (Table) 
--
CREATE TABLE MICROSERVICIOS.VARIEDADCALIBRE
(
  VARIEDADCALIBREID  NUMBER(18)                 NOT NULL,
  VARIEDADID         NUMBER(18)                 NOT NULL,
  CALIBRESID         NUMBER(18)                 NOT NULL,
  DENOMINACION       VARCHAR2(100 BYTE),
  RANGO              VARCHAR2(50 BYTE),
  ESTADO             VARCHAR2(5 BYTE),
  PESO               VARCHAR2(20 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- PRODUCTO  (Table) 
--
CREATE TABLE MICROSERVICIOS.PRODUCTO
(
  PRODUCTOID         NUMBER(18)                 NOT NULL,
  SOCIOID            NUMBER(18)                 NOT NULL,
  DESCRIPCION        VARCHAR2(100 BYTE),
  IMAGEURL           VARCHAR2(250 BYTE),
  CODIGOPRODUCTO     VARCHAR2(20 BYTE),
  VARIEDADCALIBREID  NUMBER(18)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_VARIEDADCALIBRE  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_VARIEDADCALIBRE
 IS

    FUNCTION LIST_VARIEDADCALIBRE RETURN SYS_REFCURSOR;
    
   PROCEDURE AGREGAR_VARIEDADCALIBRE (IN_VARIEDADID IN NUMBER, IN_CALIBRESID IN NUMBER, IN_DENOMINACION IN VARCHAR2, IN_RANGO IN VARCHAR2,IN_PESO IN VARCHAR2, RPTA OUT VARCHAR2);  
    
END WEB_VARIEDADCALIBRE;
/


--
-- WEB_CALIBRES  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_CALIBRES IS

    FUNCTION LIST_CALIBRES RETURN SYS_REFCURSOR;
    
    FUNCTION LIST_VARIEDAD RETURN SYS_REFCURSOR;  
      
    PROCEDURE INS_CALIBRES( IN_DENOMINACION VARCHAR2, RPTA OUT VARCHAR2);
    
    PROCEDURE UPD_CALIBRES(IN_CALIBRESID NUMBER,IN_VARIEDADID NUMBER, IN_DENOMINACION VARCHAR2, IN_MEDIDA VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE DEL_CALIBRES(IN_CALIBRESID NUMBER,RPTA OUT VARCHAR2);     
   
 END WEB_CALIBRES;
/


--
-- WEB_PRODUCTO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_PRODUCTO IS

    FUNCTION LIST_PRODUCTO RETURN SYS_REFCURSOR;
        
    PROCEDURE AGREGAR_PRODUCTO ( IN_VARIEDADCALIBREID IN  NUMBER,  IN_SOCIOID  IN NUMBER, IN_DESCRIPCION  IN VARCHAR2, IN_IMAGEURL IN VARCHAR2, IN_CODIGOPRODUCTO IN VARCHAR2, RPTA OUT VARCHAR2);
    
END WEB_PRODUCTO;
/


--
-- WEB_VARIEDAD  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_VARIEDAD IS

    FUNCTION LIST_VARIEDAD RETURN SYS_REFCURSOR;
    
    FUNCTION LIST_VARIEDAD_DETALLE RETURN SYS_REFCURSOR;
 
    FUNCTION LIST_ALMACEN RETURN SYS_REFCURSOR;

    FUNCTION LIST_UNIDAD RETURN SYS_REFCURSOR;
    
    PROCEDURE INS_VARIEDAD(IN_ALMACENID IN NUMBER, IN_DENOMINACION IN VARCHAR2, IN_DESCRIPCION IN VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE UPD_VARIEDAD(IN_VARIEDADID NUMBER,IN_ALMACENID NUMBER, IN_UNIDADMEDIDAID  NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2);
    
    PROCEDURE DEL_VARIEDAD(IN_VARIEDADID NUMBER,RPTA OUT VARCHAR2);   
    
END WEB_VARIEDAD;
/


--
-- WEB_VARIEDAD  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_VARIEDAD IS

    FUNCTION LIST_VARIEDAD
    RETURN SYS_REFCURSOR IS VARIEDAD_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN VARIEDAD_RESULT
        FOR SELECT  VARIEDADID,  ALMACENID,  DENOMINACION,  DESCRIPCION,  IMAGEN,  ESTADOVARIEDAD FROM VARIEDAD
        ORDER BY  VARIEDADID DESC; 
        RETURN VARIEDAD_RESULT;
    END;

    FUNCTION LIST_VARIEDAD_DETALLE 
    RETURN SYS_REFCURSOR IS VARIEDAD_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN VARIEDAD_RESULT
        FOR SELECT V.VARIEDADID, A.DENOMINACION , V.DENOMINACION , V.DESCRIPCION , V.IMAGEN, V.ESTADOVARIEDAD 
        FROM VARIEDAD V INNER JOIN ALMACEN A ON A.ALMACENID=V.ALMACENID
        ORDER BY  V.VARIEDADID DESC; 
        RETURN VARIEDAD_RESULT;
    END;
 
    FUNCTION LIST_ALMACEN 
    RETURN SYS_REFCURSOR IS ALMACEN_RESULT SYS_REFCURSOR;
    BEGIN 
        OPEN ALMACEN_RESULT
        FOR   SELECT ALMACENID,DENOMINACION, DESCRIPCION, ESTADOALMACEN
         FROM ALMACEN  
         WHERE ESTADOALMACEN='1'               
        ORDER BY 1; 
        RETURN ALMACEN_RESULT;
    END;

    FUNCTION LIST_UNIDAD 
    RETURN SYS_REFCURSOR IS UNIDAD_RESULT SYS_REFCURSOR;
    BEGIN 
        OPEN UNIDAD_RESULT
        FOR   SELECT UNIDADMEDIDAID,DENOMINACION, ESTADOUNIDADMEDIDA
         FROM UNIDADMEDIDA  
         WHERE ESTADOUNIDADMEDIDA='1'               
        ORDER BY 2; 
        RETURN UNIDAD_RESULT;
    END;
    
    PROCEDURE INS_VARIEDAD(IN_ALMACENID IN NUMBER, IN_DENOMINACION IN VARCHAR2, IN_DESCRIPCION IN VARCHAR2,RPTA OUT VARCHAR2)
    IS
    V_VARIEDADID VARIEDAD.VARIEDADID%TYPE;
    ESTADOVARIEDAD VARIEDAD.ESTADOVARIEDAD%TYPE:='1';
    BEGIN
        SELECT NVL(MAX(VARIEDADID),0)+1 INTO V_VARIEDADID FROM VARIEDAD;
        INSERT INTO VARIEDAD (VARIEDADID, ALMACENID, DENOMINACION, DESCRIPCION, ESTADOVARIEDAD)
        VALUES(V_VARIEDADID,IN_ALMACENID, IN_DENOMINACION,IN_DESCRIPCION,ESTADOVARIEDAD);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
    PROCEDURE UPD_VARIEDAD(IN_VARIEDADID NUMBER,IN_ALMACENID NUMBER, IN_UNIDADMEDIDAID  NUMBER, IN_DENOMINACION VARCHAR2, IN_DESCRIPCION VARCHAR2,RPTA OUT VARCHAR2)
    IS
    BEGIN 
    UPDATE VARIEDAD SET 
                    ALMACENID=IN_ALMACENID,
                  --  UNIDADMEDIDAID=IN_UNIDADMEDIDAID,
                    DENOMINACION=IN_DENOMINACION,
                    DESCRIPCION=IN_DESCRIPCION                 
                    WHERE VARIEDADID=IN_VARIEDADID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    
    END;
    
    PROCEDURE DEL_VARIEDAD(IN_VARIEDADID NUMBER,RPTA OUT VARCHAR2)
    IS 
    BEGIN 
    UPDATE VARIEDAD SET              
                    ESTADOVARIEDAD='0'
                    WHERE VARIEDADID=IN_VARIEDADID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
  
END WEB_VARIEDAD;
/


--
-- WEB_CALIBRES  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_CALIBRES IS

    FUNCTION LIST_CALIBRES
    RETURN SYS_REFCURSOR IS CALIBRES_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CALIBRES_RESULT
        FOR SELECT CALIBRESID, DENOMINACION, ESTADOCALIBRES FROM CALIBRES 
        WHERE ESTADOCALIBRES='ACT'
        ORDER BY CALIBRESID DESC; 
        RETURN CALIBRES_RESULT;
    END;
     
    FUNCTION LIST_VARIEDAD 
    RETURN SYS_REFCURSOR IS VARIEDAD_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN VARIEDAD_RESULT
        FOR   SELECT A.VARIEDADID,A.DENOMINACION, A.DESCRIPCION, A.ESTADOVARIEDAD FROM VARIEDAD A   
        WHERE ESTADOVARIEDAD='1'    
        ORDER BY 1; 
        RETURN VARIEDAD_RESULT;
    END;

PROCEDURE INS_CALIBRES(IN_DENOMINACION VARCHAR2, RPTA OUT VARCHAR2)
    IS
    V_CALIBRESID CALIBRES.CALIBRESID%TYPE;
    ESTADOCALIBRES CALIBRES.ESTADOCALIBRES%TYPE:='ACT';
    BEGIN
        SELECT NVL(MAX(CALIBRESID),0)+1 INTO V_CALIBRESID FROM CALIBRES;
        INSERT INTO CALIBRES (CALIBRESID, DENOMINACION, ESTADOCALIBRES)
        VALUES(V_CALIBRESID,IN_DENOMINACION,ESTADOCALIBRES);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
    
    PROCEDURE UPD_CALIBRES(IN_CALIBRESID NUMBER,IN_VARIEDADID NUMBER, IN_DENOMINACION VARCHAR2, IN_MEDIDA VARCHAR2,RPTA OUT VARCHAR2)
    IS
    BEGIN 
    UPDATE CALIBRES SET 
                  
                    DENOMINACION=IN_DENOMINACION
               
                    WHERE CALIBRESID=IN_CALIBRESID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    
    END;
    
    PROCEDURE DEL_CALIBRES(IN_CALIBRESID NUMBER,RPTA OUT VARCHAR2)
    IS 
    BEGIN 
    UPDATE CALIBRES SET              
                    ESTADOCALIBRES='0'
                    WHERE CALIBRESID=IN_CALIBRESID;
    COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END;
END WEB_CALIBRES;
/


--
-- WEB_PRODUCTO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_PRODUCTO IS

    FUNCTION LIST_PRODUCTO
    RETURN SYS_REFCURSOR IS PRODUCTO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN PRODUCTO_RESULT
        FOR  SELECT P.PRODUCTOID, PER.NOMBRECOMPLETO, P.CODIGOPRODUCTO, V.DENOMINACION , P.DESCRIPCION, P.IMAGEURL
        FROM PRODUCTO P 
        INNER JOIN SOCIO S ON S.SOCIOID=P.SOCIOID
        INNER JOIN PERSONA PER ON PER.PERSONAID=S.PERSONAID
        INNER JOIN  VARIEDADCALIBRE VC ON P.VARIEDADCALIBREID =VC.VARIEDADCALIBREID
        INNER JOIN  VARIEDAD V ON VC.VARIEDADID=V.VARIEDADID
         ORDER BY P.PRODUCTOID DESC; 
        RETURN PRODUCTO_RESULT;
    END LIST_PRODUCTO;

    PROCEDURE AGREGAR_PRODUCTO ( IN_VARIEDADCALIBREID IN  NUMBER,  IN_SOCIOID  IN    NUMBER, IN_DESCRIPCION  IN VARCHAR2, IN_IMAGEURL IN VARCHAR2, IN_CODIGOPRODUCTO IN VARCHAR2, RPTA OUT VARCHAR2)
    IS
    IN_PRODUCTOID PRODUCTO.PRODUCTOID%TYPE;

    BEGIN
        SELECT NVL(MAX(PRODUCTOID),0)+1 INTO IN_PRODUCTOID FROM PRODUCTO;
        INSERT INTO  PRODUCTO (PRODUCTOID, SOCIOID, DESCRIPCION, IMAGEURL, CODIGOPRODUCTO, VARIEDADCALIBREID) 
        VALUES (IN_PRODUCTOID ,IN_SOCIOID ,IN_DESCRIPCION,IN_IMAGEURL,IN_CODIGOPRODUCTO, IN_VARIEDADCALIBREID);
        COMMIT;
           EXCEPTION
                WHEN OTHERS THEN
                 RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
                 RPTA:='ERROR EN REGISTRAR';
                 ROLLBACK;
    END AGREGAR_PRODUCTO;

END WEB_PRODUCTO;
/


--
-- WEB_VARIEDADCALIBRE  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_VARIEDADCALIBRE IS

    FUNCTION LIST_VARIEDADCALIBRE
    RETURN SYS_REFCURSOR IS VARIEDADCALIBRE_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN VARIEDADCALIBRE_RESULT
            FOR SELECT   VC.VARIEDADCALIBREID,  V.DENOMINACION , C.DENOMINACION ,  VC.DENOMINACION , VC.RANGO, VC.PESO , VC.ESTADO
            FROM VARIEDADCALIBRE  VC INNER JOIN VARIEDAD V ON V.VARIEDADID=VC.VARIEDADID
            INNER JOIN CALIBRES C ON C.CALIBRESID=VC.CALIBRESID
             ORDER BY VC.VARIEDADCALIBREID DESC; 
        RETURN VARIEDADCALIBRE_RESULT;
    END LIST_VARIEDADCALIBRE;

    PROCEDURE AGREGAR_VARIEDADCALIBRE (IN_VARIEDADID IN NUMBER, IN_CALIBRESID IN NUMBER, IN_DENOMINACION IN VARCHAR2, IN_RANGO IN VARCHAR2,IN_PESO IN VARCHAR2, RPTA OUT VARCHAR2)
    IS 
    IN_VARIEDADCALIBREID NUMBER;
    IN_ESTADO VARCHAR2(5);
    BEGIN
         SELECT NVL(MAX(VARIEDADCALIBREID),0)+1 INTO IN_VARIEDADCALIBREID FROM VARIEDADCALIBRE;
         IN_ESTADO:='ACT';
         INSERT INTO VARIEDADCALIBRE(VARIEDADCALIBREID,  VARIEDADID,  CALIBRESID,  DENOMINACION,  RANGO,  ESTADO, PESO)
         VALUES (IN_VARIEDADCALIBREID,  IN_VARIEDADID,  IN_CALIBRESID, IN_DENOMINACION,  IN_RANGO,  IN_ESTADO, IN_PESO);      
         COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
             
    END AGREGAR_VARIEDADCALIBRE;

END WEB_VARIEDADCALIBRE;
/


--
-- INVENTARIO  (Table) 
--
CREATE TABLE MICROSERVICIOS.INVENTARIO
(
  INVENTARIOID      NUMBER(18)                  NOT NULL,
  ALMACENID         NUMBER(18)                  NOT NULL,
  PRODUCTOID        NUMBER(18)                  NOT NULL,
  UNIDADMEDIDAID    NUMBER(18)                  NOT NULL,
  TIPODOCUMENTOID   NUMBER(18)                  NOT NULL,
  TIPOMOVIMIENTOID  NUMBER(18)                  NOT NULL,
  FECHAMOVIMIENTO   DATE,
  CANTIDAD          NUMBER(18),
  PRECIOUNITARIO    NUMBER(16,2),
  PRECIOTOTAL       NUMBER(16,2),
  ESTADOINVENTARIO  VARCHAR2(1 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- ORDENCOMPRA  (Table) 
--
CREATE TABLE MICROSERVICIOS.ORDENCOMPRA
(
  ORDENCOMPRAID    NUMBER(18)                   NOT NULL,
  CLIENTEID        NUMBER(18)                   NOT NULL,
  INVENTARIOID     NUMBER(18)                   NOT NULL,
  CANTIDAD         NUMBER(18),
  FECHAORDEN       DATE,
  FECHAAPROBACION  DATE,
  VALORVENTA       NUMBER(16,2),
  ESTADOORDEN      VARCHAR2(5 BYTE),
  MONEDAID         NUMBER(18),
  OBSERVACION      VARCHAR2(250 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_INVENTARIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_INVENTARIO
 IS

    FUNCTION LIST_INVENTARIO RETURN SYS_REFCURSOR;
    
   PROCEDURE AGREGAR_INVENTARIO (IN_ALMACENID IN NUMBER, IN_PRODUCTOID IN NUMBER, IN_UNIDADMEDIDAID IN NUMBER, IN_TIPODOCUMENTOID IN NUMBER,
     IN_TIPOMOVIMIENTOID IN NUMBER,  IN_FECHAMOVIMIENTO IN DATE,  IN_CANTIDAD IN NUMBER, IN_PRECIOUNITARIO IN NUMBER, IN_PRECIOTOTAL IN NUMBER, RPTA OUT VARCHAR2);  
    
END WEB_INVENTARIO;
/


--
-- WEB_ORDENCOMPRA  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_ORDENCOMPRA IS

    FUNCTION LIST_ORDENCOMPRA RETURN SYS_REFCURSOR;
    
    FUNCTION LIST_ORDENCOMPRA_DETALLE (IN_CODIGOPRODUCTO IN VARCHAR2) RETURN SYS_REFCURSOR;
    
    PROCEDURE INS_ORDENCOMPRA(IN_CLIENTEID IN NUMBER, IN_INVENTARIOID IN VARCHAR2, IN_CANTIDAD IN VARCHAR2, IN_MONEDAID IN VARCHAR2, IN_OBSERVACION IN VARCHAR2, RPTA OUT VARCHAR2);
     
END WEB_ORDENCOMPRA;
/


--
-- WEB_PRODUCTO_INVENTARIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_PRODUCTO_INVENTARIO
IS

    FUNCTION LIST_PRODUCTO_INVENTARIO (IN_ALMACENID IN NUMBER)  RETURN SYS_REFCURSOR;
    
END WEB_PRODUCTO_INVENTARIO;
/


--
-- WEB_ALMACEN_INVENTARIO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_ALMACEN_INVENTARIO IS


    FUNCTION LIST_ALMACEN_INVENTARIO RETURN SYS_REFCURSOR;
    
END WEB_ALMACEN_INVENTARIO;
/


--
-- WEB_ALMACEN_INVENTARIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_ALMACEN_INVENTARIO IS


    FUNCTION LIST_ALMACEN_INVENTARIO
    RETURN SYS_REFCURSOR IS ALMACEN_INVENTARIO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ALMACEN_INVENTARIO_RESULT
        FOR SELECT I.INVENTARIOID ,A.DENOMINACION, I.CANTIDAD, I.PRECIOUNITARIO, I.PRECIOTOTAL,
        ((I.CANTIDAD * 100) / (SELECT SUM(CANTIDAD) FROM INVENTARIO)) AS PORCENTAJE
        FROM INVENTARIO I INNER JOIN ALMACEN A ON A.ALMACENID=I.ALMACENID
        GROUP BY I.INVENTARIOID ,A.DENOMINACION, I.CANTIDAD, I.PRECIOUNITARIO, I.PRECIOTOTAL
        ORDER BY  I.INVENTARIOID ASC; 
        RETURN ALMACEN_INVENTARIO_RESULT;
    END;

END WEB_ALMACEN_INVENTARIO;
/


--
-- WEB_PRODUCTO_INVENTARIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_PRODUCTO_INVENTARIO IS


    FUNCTION LIST_PRODUCTO_INVENTARIO  (IN_ALMACENID IN NUMBER)
    RETURN SYS_REFCURSOR IS PRODUCTO_INVENTARIO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN PRODUCTO_INVENTARIO_RESULT
        FOR 
            SELECT I.INVENTARIOID, P.CODIGOPRODUCTO, V.DENOMINACION, P.DESCRIPCION, UM.DENOMINACION, I.CANTIDAD, I.PRECIOUNITARIO
            FROM INVENTARIO I INNER JOIN ALMACEN A ON I.ALMACENID=A.ALMACENID 
            INNER JOIN PRODUCTO P ON P.PRODUCTOID=I.PRODUCTOID
            INNER JOIN UNIDADMEDIDA UM ON I.UNIDADMEDIDAID=UM.UNIDADMEDIDAID
            INNER JOIN VARIEDADCALIBRE VC ON VC.VARIEDADCALIBREID=P.VARIEDADCALIBREID
            INNER JOIN VARIEDAD V ON VC.VARIEDADID=V.VARIEDADID
            WHERE I.ALMACENID=IN_ALMACENID;
        RETURN PRODUCTO_INVENTARIO_RESULT;
    END LIST_PRODUCTO_INVENTARIO;
    
       
        
END WEB_PRODUCTO_INVENTARIO;
/


--
-- WEB_ORDENCOMPRA  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_ORDENCOMPRA IS

    FUNCTION LIST_ORDENCOMPRA_DETALLE (IN_CODIGOPRODUCTO IN VARCHAR2)
    RETURN SYS_REFCURSOR IS ORDENCOMPRA_DETALLE_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ORDENCOMPRA_DETALLE_RESULT
            FOR SELECT  PRO.PRODUCTOID,P.NOMBRECOMPLETO, V.DENOMINACION,  C.DENOMINACION, VC.DENOMINACION, VC.RANGO, VC.PESO,  PRO.DESCRIPCION
           FROM PRODUCTO PRO INNER JOIN VARIEDADCALIBRE VC ON PRO.VARIEDADCALIBREID=VC.VARIEDADCALIBREID
           INNER JOIN  SOCIO S ON S.SOCIOID=PRO.SOCIOID
           INNER JOIN PERSONA P ON P.PERSONAID=S.PERSONAID
           INNER JOIN VARIEDAD V ON VC.VARIEDADID=V.VARIEDADID
           INNER JOIN CALIBRES C ON C.CALIBRESID=VC.CALIBRESID
           WHERE PRO.CODIGOPRODUCTO=IN_CODIGOPRODUCTO;          
        RETURN ORDENCOMPRA_DETALLE_RESULT;
    END LIST_ORDENCOMPRA_DETALLE;

    FUNCTION LIST_ORDENCOMPRA
    RETURN SYS_REFCURSOR IS ORDENCOMPRA_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN ORDENCOMPRA_RESULT
            FOR SELECT OC.ORDENCOMPRAID,PRO.CODIGOPRODUCTO,  OC.CANTIDAD, I.PRECIOUNITARIO, UM.DENOMINACION , OC.FECHAORDEN, OC.FECHAAPROBACION, 
            OC.VALORVENTA, P.NOMBRECOMPLETO,  OC.ESTADOORDEN
            FROM ORDENCOMPRA OC INNER JOIN CLIENTE C ON OC.CLIENTEID=C.CLIENTEID
            INNER JOIN PERSONA P ON C.PERSONAID=P.PERSONAID
            INNER JOIN INVENTARIO I ON I.INVENTARIOID=OC.INVENTARIOID
            INNER JOIN UNIDADMEDIDA UM ON UM.UNIDADMEDIDAID=I.UNIDADMEDIDAID
            INNER JOIN PRODUCTO PRO ON PRO.PRODUCTOID=I.PRODUCTOID        
            ORDER BY OC.ORDENCOMPRAID DESC;          
        RETURN ORDENCOMPRA_RESULT;
    END LIST_ORDENCOMPRA;

    PROCEDURE INS_ORDENCOMPRA(IN_CLIENTEID IN NUMBER, IN_INVENTARIOID IN VARCHAR2, IN_CANTIDAD IN VARCHAR2, IN_MONEDAID IN VARCHAR2, IN_OBSERVACION IN VARCHAR2, RPTA OUT VARCHAR2)
    IS
        IN_ORDENCOMPRAID ORDENCOMPRA.ORDENCOMPRAID%TYPE;
        IN_FECHAORDEN ORDENCOMPRA.FECHAORDEN%TYPE:=SYSDATE;
        IN_FECHAAPROBACION ORDENCOMPRA.FECHAAPROBACION%TYPE:=SYSDATE;
        IN_VALORVENTA ORDENCOMPRA.VALORVENTA%TYPE;
        IN_ESTADOORDEN ORDENCOMPRA.ESTADOORDEN%TYPE:='INAC';
        
        IN_PRECIOUNITARIO INVENTARIO.PRECIOUNITARIO%TYPE;
    
    BEGIN
        SELECT NVL(MAX(ORDENCOMPRAID),0)+1 INTO IN_ORDENCOMPRAID FROM ORDENCOMPRA; 
               
         SELECT A.COSTOTRANSPORTE INTO IN_VALORVENTA FROM ALMACEN A INNER JOIN INVENTARIO I ON  A.ALMACENID=I.ALMACENID WHERE I.INVENTARIOID= IN_INVENTARIOID;
         SELECT PRECIOUNITARIO INTO IN_PRECIOUNITARIO FROM INVENTARIO WHERE INVENTARIOID= IN_INVENTARIOID;
        
        INSERT INTO ORDENCOMPRA (ORDENCOMPRAID, CLIENTEID, INVENTARIOID, CANTIDAD, FECHAORDEN, FECHAAPROBACION, VALORVENTA, ESTADOORDEN, MONEDAID, OBSERVACION)
        VALUES(IN_ORDENCOMPRAID, IN_CLIENTEID, IN_INVENTARIOID, IN_CANTIDAD, IN_FECHAORDEN, IN_FECHAAPROBACION, IN_VALORVENTA+IN_PRECIOUNITARIO*IN_CANTIDAD, IN_ESTADOORDEN, IN_MONEDAID, IN_OBSERVACION);
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END INS_ORDENCOMPRA;

END WEB_ORDENCOMPRA;
/


--
-- WEB_INVENTARIO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_INVENTARIO IS

    FUNCTION LIST_INVENTARIO
    RETURN SYS_REFCURSOR IS INVENTARIO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN INVENTARIO_RESULT
            FOR SELECT I.INVENTARIOID, A.DENOMINACION, P.CODIGOPRODUCTO, UD.DENOMINACION, TD.DESCRIPCION,
            TM.DENOMINACION, I.FECHAMOVIMIENTO, I.CANTIDAD, I.PRECIOUNITARIO, I.PRECIOTOTAL, I.ESTADOINVENTARIO
             FROM INVENTARIO I INNER JOIN ALMACEN A ON I.ALMACENID=A.ALMACENID
             INNER JOIN PRODUCTO P ON I.PRODUCTOID=P.PRODUCTOID
             INNER JOIN  UNIDADMEDIDA UD ON UD.UNIDADMEDIDAID=I.UNIDADMEDIDAID
             INNER JOIN TIPODOCUMENTO TD ON TD.TIPODOCUMENTOID=I.TIPODOCUMENTOID
             INNER JOIN TIPOMOVIMIENTO TM ON TM.TIPOMOVIMIENTOID=I.TIPOMOVIMIENTOID
             ORDER BY I.INVENTARIOID DESC; 
        RETURN INVENTARIO_RESULT;
    END LIST_INVENTARIO;


    PROCEDURE AGREGAR_INVENTARIO (IN_ALMACENID IN NUMBER, IN_PRODUCTOID IN NUMBER, IN_UNIDADMEDIDAID IN NUMBER, IN_TIPODOCUMENTOID IN NUMBER,
     IN_TIPOMOVIMIENTOID IN NUMBER,  IN_FECHAMOVIMIENTO IN DATE,  IN_CANTIDAD IN NUMBER, IN_PRECIOUNITARIO IN NUMBER, IN_PRECIOTOTAL IN NUMBER, RPTA OUT VARCHAR2)
    IS 
    IN_INVENTARIOID NUMBER;
    IN_ESTADOINVENTARIO VARCHAR2(1);
    BEGIN
         SELECT NVL(MAX(INVENTARIOID),0)+1 INTO IN_INVENTARIOID FROM INVENTARIO;
         IN_ESTADOINVENTARIO:='1';
         INSERT INTO INVENTARIO(INVENTARIOID, ALMACENID, PRODUCTOID, UNIDADMEDIDAID, TIPODOCUMENTOID, TIPOMOVIMIENTOID,  FECHAMOVIMIENTO,  CANTIDAD, PRECIOUNITARIO, PRECIOTOTAL, ESTADOINVENTARIO)
         VALUES (IN_INVENTARIOID, IN_ALMACENID, IN_PRODUCTOID, IN_UNIDADMEDIDAID, IN_TIPODOCUMENTOID, IN_TIPOMOVIMIENTOID,  IN_FECHAMOVIMIENTO,  IN_CANTIDAD, IN_PRECIOUNITARIO, IN_PRECIOTOTAL, IN_ESTADOINVENTARIO);      
         COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
             
    END AGREGAR_INVENTARIO;

END WEB_INVENTARIO;
/


--
-- CERTIFICADO  (Table) 
--
CREATE TABLE MICROSERVICIOS.CERTIFICADO
(
  CERTIFICADOID       NUMBER(18)                NOT NULL,
  CODIGOCERTIFICADO   VARCHAR2(20 BYTE),
  ENTIDADGARANTEID    NUMBER(18)                NOT NULL,
  RESPONSABLEID       NUMBER(18)                NOT NULL,
  ORDENCOMPRAID       NUMBER(18)                NOT NULL,
  FECHACERTIFICACION  DATE,
  CANTIDAD            NUMBER(18),
  PRECIOUNITARIO      NUMBER(16,2),
  COSTOTOTAL          NUMBER(16,2),
  IGV                 NUMBER(16,2),
  COSTOTRASNPORTE     NUMBER(16,2),
  PRECIOVENTA         NUMBER(16,2),
  ESTADORESPONSABLE   VARCHAR2(20 BYTE),
  ESTADOGARANTE       VARCHAR2(20 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- MOVIMIENTO  (Table) 
--
CREATE TABLE MICROSERVICIOS.MOVIMIENTO
(
  MOVIMIENTOID        NUMBER(18)                NOT NULL,
  OPERACIONID         NUMBER(18)                NOT NULL,
  OBSERVACION         VARCHAR2(500 BYTE),
  SUBTOTAL            NUMBER(16,2),
  IGV                 NUMBER(16,2),
  AJUSTEREDONDEO      NUMBER(16,2),
  TOTALIMPORTE        NUMBER(16,2),
  GLOSA               VARCHAR2(200 BYTE),
  MONEDAID            NUMBER(18),
  FECHAPAGO           DATE,
  EXTORNO             NUMBER(18),
  BOUCHER             LONG RAW,
  FECHAREGISTRO       DATE,
  AMORTIZACIONPAGADO  NUMBER(16,2),
  CERTIFICADOID       NUMBER(18),
  CCI                 VARCHAR2(30 BYTE)
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- MOVIMIENTOBOVEDA  (Table) 
--
CREATE TABLE MICROSERVICIOS.MOVIMIENTOBOVEDA
(
  MOVIMIENTOBOVEDAID  NUMBER(18)                NOT NULL,
  MOVIMIENTOID        NUMBER(18)                NOT NULL,
  INGRESO             NUMBER(16,2),
  EGRESO              NUMBER(16,2),
  SALDO               NUMBER(16,2),
  FECHAREGISTRO       DATE
)
TABLESPACE TBS_MICROSERVICIOS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOCOMPRESS ;


--
-- WEB_CERTIFICADO  (Package) 
--
CREATE OR REPLACE PACKAGE MICROSERVICIOS.WEB_CERTIFICADO
IS
    FUNCTION LIST_CERTIFICADO RETURN SYS_REFCURSOR;
    
     PROCEDURE INS_CERTIFICADO(IN_CODIGOCERTIFICADO IN VARCHAR2, IN_ENTIDADGARANTEID IN NUMBER, IN_RESPONSABLEID IN  NUMBER,  IN_ORDENCOMPRAID IN NUMBER,  IN_CANTIDAD IN NUMBER, IN_PRECIOUNITARIO IN NUMBER,  IN_COSTOTOTAL IN NUMBER, RPTA OUT VARCHAR2);
  
END WEB_CERTIFICADO;
/


--
-- WEB_CERTIFICADO  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY MICROSERVICIOS.WEB_CERTIFICADO IS

    FUNCTION LIST_CERTIFICADO
    RETURN SYS_REFCURSOR IS CERTIFICADO_RESULT SYS_REFCURSOR; 
    BEGIN 
        OPEN CERTIFICADO_RESULT
        FOR SELECT  CERTIFICADOID,  CODIGOCERTIFICADO,  ENTIDADGARANTEID,  RESPONSABLEID,  ORDENCOMPRAID, 
        FECHACERTIFICACION, CANTIDAD,  PRECIOUNITARIO,  COSTOTOTAL,  IGV,  COSTOTRASNPORTE,  PRECIOVENTA,  
        ESTADORESPONSABLE,  ESTADOGARANTE   
        FROM CERTIFICADO ORDER BY CERTIFICADOID DESC;
        RETURN CERTIFICADO_RESULT;
    END LIST_CERTIFICADO;
    
        
    PROCEDURE INS_CERTIFICADO(IN_CODIGOCERTIFICADO IN VARCHAR2, IN_ENTIDADGARANTEID IN NUMBER, IN_RESPONSABLEID IN  NUMBER, IN_ORDENCOMPRAID IN NUMBER,  
    IN_CANTIDAD IN NUMBER, IN_PRECIOUNITARIO IN NUMBER, IN_COSTOTOTAL IN NUMBER, RPTA OUT VARCHAR2)
    IS
                    IN_CERTIFICADOID CERTIFICADO.CERTIFICADOID%TYPE;
                    IN_FECHACERTIFICACION CERTIFICADO.FECHACERTIFICACION%TYPE:=SYSDATE;
                    IN_IGV CERTIFICADO.IGV%TYPE;
                    IN_COSTOTRASNPORTE CERTIFICADO.COSTOTRASNPORTE%TYPE;
                    IN_PRECIOVENTA CERTIFICADO.PRECIOVENTA%TYPE;
                    
                    IN_ESTADORESPONSABLE CERTIFICADO.ESTADORESPONSABLE%TYPE:='INAC';
                    IN_ESTADOGARANTE CERTIFICADO.ESTADOGARANTE%TYPE:='INAC';
    BEGIN
        SELECT NVL(MAX(CERTIFICADOID),0)+1 INTO IN_CERTIFICADOID FROM CERTIFICADO;
        INSERT INTO CERTIFICADO (CERTIFICADOID,  CODIGOCERTIFICADO,  ENTIDADGARANTEID,  RESPONSABLEID,  ORDENCOMPRAID,  FECHACERTIFICACION, 
        CANTIDAD, PRECIOUNITARIO, COSTOTOTAL, IGV, COSTOTRASNPORTE, PRECIOVENTA, ESTADORESPONSABLE, ESTADOGARANTE)
        VALUES(IN_CERTIFICADOID,  IN_CODIGOCERTIFICADO,  IN_ENTIDADGARANTEID,  IN_RESPONSABLEID,  IN_ORDENCOMPRAID,  IN_FECHACERTIFICACION, 
        IN_CANTIDAD, IN_PRECIOUNITARIO, IN_COSTOTOTAL, IN_IGV, IN_COSTOTRASNPORTE, IN_PRECIOVENTA, IN_ESTADORESPONSABLE, IN_ESTADOGARANTE);
        update ordencompra set estadoorden='ACT' WHERE ORDENCOMPRAID=IN_ORDENCOMPRAID;
        COMMIT; 
            EXCEPTION
            WHEN OTHERS THEN
             RAISE_APPLICATION_ERROR(-20101,'ERROR EN REGISTRAR '||SQLERRM);
             RPTA:='ERROR EN REGISTRAR';
             ROLLBACK;
    END INS_CERTIFICADO;
       
END WEB_CERTIFICADO;
/


-- 
-- Non Foreign Key Constraints for Table CALIBRES 
-- 
ALTER TABLE MICROSERVICIOS.CALIBRES ADD (
  PRIMARY KEY
  (CALIBRESID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table NACIONALIDAD 
-- 
ALTER TABLE MICROSERVICIOS.NACIONALIDAD ADD (
  PRIMARY KEY
  (NACIONALIDADID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table OPERACION 
-- 
ALTER TABLE MICROSERVICIOS.OPERACION ADD (
  PRIMARY KEY
  (OPERACIONID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table ROLUSUARIO 
-- 
ALTER TABLE MICROSERVICIOS.ROLUSUARIO ADD (
  PRIMARY KEY
  (IDROLUSUARIO)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table SANIDAD 
-- 
ALTER TABLE MICROSERVICIOS.SANIDAD ADD (
  PRIMARY KEY
  (SANIDADID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table TIPODOCUMENTO 
-- 
ALTER TABLE MICROSERVICIOS.TIPODOCUMENTO ADD (
  PRIMARY KEY
  (TIPODOCUMENTOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table TIPOMOVIMIENTO 
-- 
ALTER TABLE MICROSERVICIOS.TIPOMOVIMIENTO ADD (
  PRIMARY KEY
  (TIPOMOVIMIENTOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table UBIGEO 
-- 
ALTER TABLE MICROSERVICIOS.UBIGEO ADD (
  PRIMARY KEY
  (UBIGEOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table UNIDADMEDIDA 
-- 
ALTER TABLE MICROSERVICIOS.UNIDADMEDIDA ADD (
  PRIMARY KEY
  (UNIDADMEDIDAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table VALORTABLA 
-- 
ALTER TABLE MICROSERVICIOS.VALORTABLA ADD (
  PRIMARY KEY
  (TABLAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table CLUSTERES 
-- 
ALTER TABLE MICROSERVICIOS.CLUSTERES ADD (
  PRIMARY KEY
  (CLUSTERESID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table ENTIDADGARANTE 
-- 
ALTER TABLE MICROSERVICIOS.ENTIDADGARANTE ADD (
  PRIMARY KEY
  (ENTIDADGARANTEID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table PERSONA 
-- 
ALTER TABLE MICROSERVICIOS.PERSONA ADD (
  PRIMARY KEY
  (PERSONAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table SOCIO 
-- 
ALTER TABLE MICROSERVICIOS.SOCIO ADD (
  PRIMARY KEY
  (SOCIOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table USUARIO 
-- 
ALTER TABLE MICROSERVICIOS.USUARIO ADD (
  PRIMARY KEY
  (USUARIOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table ALMACEN 
-- 
ALTER TABLE MICROSERVICIOS.ALMACEN ADD (
  PRIMARY KEY
  (ALMACENID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table CLIENTE 
-- 
ALTER TABLE MICROSERVICIOS.CLIENTE ADD (
  PRIMARY KEY
  (CLIENTEID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table RESPONSABLE 
-- 
ALTER TABLE MICROSERVICIOS.RESPONSABLE ADD (
  PRIMARY KEY
  (RESPONSABLEID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table SUGERENCIA 
-- 
ALTER TABLE MICROSERVICIOS.SUGERENCIA ADD (
  PRIMARY KEY
  (SUGERENCIAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table VARIEDAD 
-- 
ALTER TABLE MICROSERVICIOS.VARIEDAD ADD (
  PRIMARY KEY
  (VARIEDADID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table VARIEDADCALIBRE 
-- 
ALTER TABLE MICROSERVICIOS.VARIEDADCALIBRE ADD (
  PRIMARY KEY
  (VARIEDADCALIBREID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table PRODUCTO 
-- 
ALTER TABLE MICROSERVICIOS.PRODUCTO ADD (
  PRIMARY KEY
  (PRODUCTOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table INVENTARIO 
-- 
ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  PRIMARY KEY
  (INVENTARIOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table ORDENCOMPRA 
-- 
ALTER TABLE MICROSERVICIOS.ORDENCOMPRA ADD (
  PRIMARY KEY
  (ORDENCOMPRAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table CERTIFICADO 
-- 
ALTER TABLE MICROSERVICIOS.CERTIFICADO ADD (
  PRIMARY KEY
  (CERTIFICADOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table MOVIMIENTO 
-- 
ALTER TABLE MICROSERVICIOS.MOVIMIENTO ADD (
  PRIMARY KEY
  (MOVIMIENTOID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Non Foreign Key Constraints for Table MOVIMIENTOBOVEDA 
-- 
ALTER TABLE MICROSERVICIOS.MOVIMIENTOBOVEDA ADD (
  PRIMARY KEY
  (MOVIMIENTOBOVEDAID)
  USING INDEX
    TABLESPACE TBS_MICROSERVICIOS
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
               ));


-- 
-- Foreign Key Constraints for Table SANIDAD 
-- 
ALTER TABLE MICROSERVICIOS.SANIDAD ADD (
  FOREIGN KEY (CALIBRESID) 
  REFERENCES MICROSERVICIOS.CALIBRES (CALIBRESID));


-- 
-- Foreign Key Constraints for Table CLUSTERES 
-- 
ALTER TABLE MICROSERVICIOS.CLUSTERES ADD (
  FOREIGN KEY (UBIGEOID) 
  REFERENCES MICROSERVICIOS.UBIGEO (UBIGEOID));


-- 
-- Foreign Key Constraints for Table ENTIDADGARANTE 
-- 
ALTER TABLE MICROSERVICIOS.ENTIDADGARANTE ADD (
  FOREIGN KEY (CLUSTERESID) 
  REFERENCES MICROSERVICIOS.CLUSTERES (CLUSTERESID));


-- 
-- Foreign Key Constraints for Table PERSONA 
-- 
ALTER TABLE MICROSERVICIOS.PERSONA ADD (
  FOREIGN KEY (IDUBIGEO) 
  REFERENCES MICROSERVICIOS.UBIGEO (UBIGEOID));

ALTER TABLE MICROSERVICIOS.PERSONA ADD (
  FOREIGN KEY (NACIONALIDADID) 
  REFERENCES MICROSERVICIOS.NACIONALIDAD (NACIONALIDADID));


-- 
-- Foreign Key Constraints for Table SOCIO 
-- 
ALTER TABLE MICROSERVICIOS.SOCIO ADD (
  FOREIGN KEY (PERSONAID) 
  REFERENCES MICROSERVICIOS.PERSONA (PERSONAID));

ALTER TABLE MICROSERVICIOS.SOCIO ADD (
  FOREIGN KEY (CLUSTERESID) 
  REFERENCES MICROSERVICIOS.CLUSTERES (CLUSTERESID));


-- 
-- Foreign Key Constraints for Table USUARIO 
-- 
ALTER TABLE MICROSERVICIOS.USUARIO ADD (
  FOREIGN KEY (SOCIOID) 
  REFERENCES MICROSERVICIOS.SOCIO (SOCIOID));

ALTER TABLE MICROSERVICIOS.USUARIO ADD (
  FOREIGN KEY (ROLUSUARIOID) 
  REFERENCES MICROSERVICIOS.ROLUSUARIO (IDROLUSUARIO));


-- 
-- Foreign Key Constraints for Table ALMACEN 
-- 
ALTER TABLE MICROSERVICIOS.ALMACEN ADD (
  FOREIGN KEY (CLUSTERESID) 
  REFERENCES MICROSERVICIOS.CLUSTERES (CLUSTERESID));


-- 
-- Foreign Key Constraints for Table CLIENTE 
-- 
ALTER TABLE MICROSERVICIOS.CLIENTE ADD (
  FOREIGN KEY (PERSONAID) 
  REFERENCES MICROSERVICIOS.PERSONA (PERSONAID));


-- 
-- Foreign Key Constraints for Table RESPONSABLE 
-- 
ALTER TABLE MICROSERVICIOS.RESPONSABLE ADD (
  FOREIGN KEY (SOCIOID) 
  REFERENCES MICROSERVICIOS.SOCIO (SOCIOID));

ALTER TABLE MICROSERVICIOS.RESPONSABLE ADD (
  FOREIGN KEY (CLUSTERESID) 
  REFERENCES MICROSERVICIOS.CLUSTERES (CLUSTERESID));


-- 
-- Foreign Key Constraints for Table SUGERENCIA 
-- 
ALTER TABLE MICROSERVICIOS.SUGERENCIA ADD (
  FOREIGN KEY (CLIENTEID) 
  REFERENCES MICROSERVICIOS.CLIENTE (CLIENTEID));

ALTER TABLE MICROSERVICIOS.SUGERENCIA ADD (
  FOREIGN KEY (CLUSTERESID) 
  REFERENCES MICROSERVICIOS.CLUSTERES (CLUSTERESID));


-- 
-- Foreign Key Constraints for Table VARIEDAD 
-- 
ALTER TABLE MICROSERVICIOS.VARIEDAD ADD (
  FOREIGN KEY (ALMACENID) 
  REFERENCES MICROSERVICIOS.ALMACEN (ALMACENID));


-- 
-- Foreign Key Constraints for Table VARIEDADCALIBRE 
-- 
ALTER TABLE MICROSERVICIOS.VARIEDADCALIBRE ADD (
  FOREIGN KEY (CALIBRESID) 
  REFERENCES MICROSERVICIOS.CALIBRES (CALIBRESID));

ALTER TABLE MICROSERVICIOS.VARIEDADCALIBRE ADD (
  FOREIGN KEY (VARIEDADID) 
  REFERENCES MICROSERVICIOS.VARIEDAD (VARIEDADID));


-- 
-- Foreign Key Constraints for Table PRODUCTO 
-- 
ALTER TABLE MICROSERVICIOS.PRODUCTO ADD (
  CONSTRAINT VARIEDADCALIBREID_FK 
  FOREIGN KEY (VARIEDADCALIBREID) 
  REFERENCES MICROSERVICIOS.VARIEDADCALIBRE (VARIEDADCALIBREID));

ALTER TABLE MICROSERVICIOS.PRODUCTO ADD (
  FOREIGN KEY (SOCIOID) 
  REFERENCES MICROSERVICIOS.SOCIO (SOCIOID));


-- 
-- Foreign Key Constraints for Table INVENTARIO 
-- 
ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  FOREIGN KEY (ALMACENID) 
  REFERENCES MICROSERVICIOS.ALMACEN (ALMACENID));

ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  FOREIGN KEY (PRODUCTOID) 
  REFERENCES MICROSERVICIOS.PRODUCTO (PRODUCTOID));

ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  FOREIGN KEY (UNIDADMEDIDAID) 
  REFERENCES MICROSERVICIOS.UNIDADMEDIDA (UNIDADMEDIDAID));

ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  FOREIGN KEY (TIPODOCUMENTOID) 
  REFERENCES MICROSERVICIOS.TIPODOCUMENTO (TIPODOCUMENTOID));

ALTER TABLE MICROSERVICIOS.INVENTARIO ADD (
  FOREIGN KEY (TIPOMOVIMIENTOID) 
  REFERENCES MICROSERVICIOS.TIPOMOVIMIENTO (TIPOMOVIMIENTOID));


-- 
-- Foreign Key Constraints for Table ORDENCOMPRA 
-- 
ALTER TABLE MICROSERVICIOS.ORDENCOMPRA ADD (
  FOREIGN KEY (CLIENTEID) 
  REFERENCES MICROSERVICIOS.CLIENTE (CLIENTEID));

ALTER TABLE MICROSERVICIOS.ORDENCOMPRA ADD (
  FOREIGN KEY (INVENTARIOID) 
  REFERENCES MICROSERVICIOS.INVENTARIO (INVENTARIOID));


-- 
-- Foreign Key Constraints for Table CERTIFICADO 
-- 
ALTER TABLE MICROSERVICIOS.CERTIFICADO ADD (
  FOREIGN KEY (ENTIDADGARANTEID) 
  REFERENCES MICROSERVICIOS.ENTIDADGARANTE (ENTIDADGARANTEID));

ALTER TABLE MICROSERVICIOS.CERTIFICADO ADD (
  FOREIGN KEY (RESPONSABLEID) 
  REFERENCES MICROSERVICIOS.RESPONSABLE (RESPONSABLEID));

ALTER TABLE MICROSERVICIOS.CERTIFICADO ADD (
  FOREIGN KEY (ORDENCOMPRAID) 
  REFERENCES MICROSERVICIOS.ORDENCOMPRA (ORDENCOMPRAID));


-- 
-- Foreign Key Constraints for Table MOVIMIENTO 
-- 
ALTER TABLE MICROSERVICIOS.MOVIMIENTO ADD (
  CONSTRAINT CERTIFICADOID_FK 
  FOREIGN KEY (CERTIFICADOID) 
  REFERENCES MICROSERVICIOS.CERTIFICADO (CERTIFICADOID));

ALTER TABLE MICROSERVICIOS.MOVIMIENTO ADD (
  FOREIGN KEY (OPERACIONID) 
  REFERENCES MICROSERVICIOS.OPERACION (OPERACIONID));


-- 
-- Foreign Key Constraints for Table MOVIMIENTOBOVEDA 
-- 
ALTER TABLE MICROSERVICIOS.MOVIMIENTOBOVEDA ADD (
  FOREIGN KEY (MOVIMIENTOID) 
  REFERENCES MICROSERVICIOS.MOVIMIENTO (MOVIMIENTOID));